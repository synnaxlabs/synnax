config_setting(
    name = "nilinuxrt",
    values = {
        "define": "platform=nilinuxrt",
    },
)

cc_library(
    name = "driver",
    hdrs = [
        "config.h",
        "daemon.h",
    ],
    srcs = select({
        ":nilinuxrt": ["daemon_nilinuxrt.cpp"],
        "@platforms//os:linux": ["daemon_linux.cpp"],
        "//conditions:default": [],
    }),
    copts = select({
        "@platforms//os:windows": ["/std:c++20"],
        "@platforms//os:linux": ["-std=c++17"],
        "//conditions:default": [],
    }),
    deps = [
        "//client/cpp:synnax",
        "//driver/breaker",
        "//driver/config",
        "//driver/heartbeat",
        "//driver/ni",
        "//driver/opc",
        "//driver/sequence",
        "//driver/task",
        "@com_github_google_glog//:glog",
        "@nlohmann_json//:json",
    ] + select({
        "@platforms//os:windows": ["//driver/labjack"],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "test_driver",
    size = "small",
    srcs = [
        "config_test.cpp",
        "task_context_test.cpp",
        "task_manager_test.cpp",
    ],
    copts = select({
        "@platforms//os:windows": ["/std:c++20"],
        "//conditions:default": [],
    }),
    deps = [
        "//driver",
        "//driver/testutil",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_binary(
    name = "driver_main",
    srcs = select({
        "//conditions:default": ["main.cpp", "daemon.h"],
    }),
    copts = select({
        # "@platforms//os:windows": [
        #    "/fsanitize=address",  # Enable AddressSanitizer for heap debugging
        #     "/ZI",                # Debug info
        #     "/DEBUG",             # Enable debug info
        #     "/MDd",               # Debug runtime
        #     "-std:c++20",
        # ],
        "//conditions:default": [
        ],
    }),
    linkopts = select({
        "@platforms//os:windows": [
            "/DEFAULTLIB:ws2_32.lib",
            "/DEFAULTLIB:iphlpapi.lib",
            "/DEFAULTLIB:psapi.lib",
            "/FORCE:MULTIPLE",  # FIXME: handles the current duplicate symbo,ls because of labjack lib. temp workaround
            # "/DEBUG",
            # "/INCREMENTAL:NO",    # Required for AddressSanitizer
            # "/fsanitize=address",  # Enable AddressSanitizer for heap debugging
            # "/DELAYLOAD:LabJackM.dll",
            # "/DELAYLOAD:LabJackWUSB.dll",  # so that link to dll is only attempted once a function is called
        ],
        "//conditions:default": [
            "-lm",
            "-ldl",
        ],
    }),
    deps = [
        "//driver",
        "//driver/breaker",
        "//driver/meminfo",
        "//driver/ni",
        "//driver/opc",
        "//driver/sequence",
        "//driver/task",
        "@com_github_gflags_gflags//:gflags",
        "@com_github_google_glog//:glog",
    ] + select({
        "@platforms//os:windows": [
            "//driver/labjack",
            "@mbedtls_win",
        ],
        "@platforms//os:linux": [
            "@mbedtls_linux",
        ],
        "@platforms//os:macos": [
            "@mbedtls_macos",
        ],
    }),
)
