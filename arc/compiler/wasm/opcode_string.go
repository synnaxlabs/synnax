// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package wasm

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpUnreachable-0]
	_ = x[OpNop-1]
	_ = x[OpBlock-2]
	_ = x[OpLoop-3]
	_ = x[OpIf-4]
	_ = x[OpElse-5]
	_ = x[OpEnd-11]
	_ = x[OpBr-12]
	_ = x[OpBrIf-13]
	_ = x[OpBrTable-14]
	_ = x[OpReturn-15]
	_ = x[OpCall-16]
	_ = x[OpCallIndirect-17]
	_ = x[OpLocalGet-32]
	_ = x[OpLocalSet-33]
	_ = x[OpLocalTee-34]
	_ = x[OpGlobalGet-35]
	_ = x[OpGlobalSet-36]
	_ = x[OpI32Load-40]
	_ = x[OpI64Load-41]
	_ = x[OpF32Load-42]
	_ = x[OpF64Load-43]
	_ = x[OpI32Load8S-44]
	_ = x[OpI32Load8U-45]
	_ = x[OpI32Load16S-46]
	_ = x[OpI32Load16U-47]
	_ = x[OpI32Store-54]
	_ = x[OpI64Store-55]
	_ = x[OpF32Store-56]
	_ = x[OpF64Store-57]
	_ = x[OpI32Store8-58]
	_ = x[OpI32Store16-59]
	_ = x[OpMemorySize-63]
	_ = x[OpMemoryGrow-64]
	_ = x[OpI32Const-65]
	_ = x[OpI64Const-66]
	_ = x[OpF32Const-67]
	_ = x[OpF64Const-68]
	_ = x[OpI32Eqz-69]
	_ = x[OpI32Eq-70]
	_ = x[OpI32Ne-71]
	_ = x[OpI32LtS-72]
	_ = x[OpI32LtU-73]
	_ = x[OpI32GtS-74]
	_ = x[OpI32GtU-75]
	_ = x[OpI32LeS-76]
	_ = x[OpI32LeU-77]
	_ = x[OpI32GeS-78]
	_ = x[OpI32GeU-79]
	_ = x[OpI64Eqz-80]
	_ = x[OpI64Eq-81]
	_ = x[OpI64Ne-82]
	_ = x[OpI64LtS-83]
	_ = x[OpI64LtU-84]
	_ = x[OpI64GtS-85]
	_ = x[OpI64GtU-86]
	_ = x[OpI64LeS-87]
	_ = x[OpI64LeU-88]
	_ = x[OpI64GeS-89]
	_ = x[OpI64GeU-90]
	_ = x[OpF32Eq-91]
	_ = x[OpF32Ne-92]
	_ = x[OpF32Lt-93]
	_ = x[OpF32Gt-94]
	_ = x[OpF32Le-95]
	_ = x[OpF32Ge-96]
	_ = x[OpF64Eq-97]
	_ = x[OpF64Ne-98]
	_ = x[OpF64Lt-99]
	_ = x[OpF64Gt-100]
	_ = x[OpF64Le-101]
	_ = x[OpF64Ge-102]
	_ = x[OpI32Clz-103]
	_ = x[OpI32Ctz-104]
	_ = x[OpI32Popcnt-105]
	_ = x[OpI32Add-106]
	_ = x[OpI32Sub-107]
	_ = x[OpI32Mul-108]
	_ = x[OpI32DivS-109]
	_ = x[OpI32DivU-110]
	_ = x[OpI32RemS-111]
	_ = x[OpI32RemU-112]
	_ = x[OpI32And-113]
	_ = x[OpI32Or-114]
	_ = x[OpI32Xor-115]
	_ = x[OpI32Shl-116]
	_ = x[OpI32ShrS-117]
	_ = x[OpI32ShrU-118]
	_ = x[OpI32Rotl-119]
	_ = x[OpI32Rotr-120]
	_ = x[OpI64Clz-121]
	_ = x[OpI64Ctz-122]
	_ = x[OpI64Popcnt-123]
	_ = x[OpI64Add-124]
	_ = x[OpI64Sub-125]
	_ = x[OpI64Mul-126]
	_ = x[OpI64DivS-127]
	_ = x[OpI64DivU-128]
	_ = x[OpI64RemS-129]
	_ = x[OpI64RemU-130]
	_ = x[OpI64And-131]
	_ = x[OpI64Or-132]
	_ = x[OpI64Xor-133]
	_ = x[OpI64Shl-134]
	_ = x[OpI64ShrS-135]
	_ = x[OpI64ShrU-136]
	_ = x[OpI64Rotl-137]
	_ = x[OpI64Rotr-138]
	_ = x[OpF32Abs-139]
	_ = x[OpF32Neg-140]
	_ = x[OpF32Ceil-141]
	_ = x[OpF32Floor-142]
	_ = x[OpF32Trunc-143]
	_ = x[OpF32Nearest-144]
	_ = x[OpF32Sqrt-145]
	_ = x[OpF32Add-146]
	_ = x[OpF32Sub-147]
	_ = x[OpF32Mul-148]
	_ = x[OpF32Div-149]
	_ = x[OpF32Min-150]
	_ = x[OpF32Max-151]
	_ = x[OpF32Copysign-152]
	_ = x[OpF64Abs-153]
	_ = x[OpF64Neg-154]
	_ = x[OpF64Ceil-155]
	_ = x[OpF64Floor-156]
	_ = x[OpF64Trunc-157]
	_ = x[OpF64Nearest-158]
	_ = x[OpF64Sqrt-159]
	_ = x[OpF64Add-160]
	_ = x[OpF64Sub-161]
	_ = x[OpF64Mul-162]
	_ = x[OpF64Div-163]
	_ = x[OpF64Min-164]
	_ = x[OpF64Max-165]
	_ = x[OpF64Copysign-166]
	_ = x[OpI32WrapI64-167]
	_ = x[OpI32TruncF32S-168]
	_ = x[OpI32TruncF32U-169]
	_ = x[OpI32TruncF64S-170]
	_ = x[OpI32TruncF64U-171]
	_ = x[OpI64ExtendI32S-172]
	_ = x[OpI64ExtendI32U-173]
	_ = x[OpI64TruncF32S-174]
	_ = x[OpI64TruncF32U-175]
	_ = x[OpI64TruncF64S-176]
	_ = x[OpI64TruncF64U-177]
	_ = x[OpF32ConvertI32S-178]
	_ = x[OpF32ConvertI32U-179]
	_ = x[OpF32ConvertI64S-180]
	_ = x[OpF32ConvertI64U-181]
	_ = x[OpF32DemoteF64-182]
	_ = x[OpF64ConvertI32S-183]
	_ = x[OpF64ConvertI32U-184]
	_ = x[OpF64ConvertI64S-185]
	_ = x[OpF64ConvertI64U-186]
	_ = x[OpF64PromoteF32-187]
	_ = x[OpI32ReinterpretF32-188]
	_ = x[OpI64ReinterpretF64-189]
	_ = x[OpF32ReinterpretI32-190]
	_ = x[OpF64ReinterpretI64-191]
}

const (
	_Opcode_name_0 = "OpUnreachableOpNopOpBlockOpLoopOpIfOpElse"
	_Opcode_name_1 = "OpEndOpBrOpBrIfOpBrTableOpReturnOpCallOpCallIndirect"
	_Opcode_name_2 = "OpLocalGetOpLocalSetOpLocalTeeOpGlobalGetOpGlobalSet"
	_Opcode_name_3 = "OpI32LoadOpI64LoadOpF32LoadOpF64LoadOpI32Load8SOpI32Load8UOpI32Load16SOpI32Load16U"
	_Opcode_name_4 = "OpI32StoreOpI64StoreOpF32StoreOpF64StoreOpI32Store8OpI32Store16"
	_Opcode_name_5 = "OpMemorySizeOpMemoryGrowOpI32ConstOpI64ConstOpF32ConstOpF64ConstOpI32EqzOpI32EqOpI32NeOpI32LtSOpI32LtUOpI32GtSOpI32GtUOpI32LeSOpI32LeUOpI32GeSOpI32GeUOpI64EqzOpI64EqOpI64NeOpI64LtSOpI64LtUOpI64GtSOpI64GtUOpI64LeSOpI64LeUOpI64GeSOpI64GeUOpF32EqOpF32NeOpF32LtOpF32GtOpF32LeOpF32GeOpF64EqOpF64NeOpF64LtOpF64GtOpF64LeOpF64GeOpI32ClzOpI32CtzOpI32PopcntOpI32AddOpI32SubOpI32MulOpI32DivSOpI32DivUOpI32RemSOpI32RemUOpI32AndOpI32OrOpI32XorOpI32ShlOpI32ShrSOpI32ShrUOpI32RotlOpI32RotrOpI64ClzOpI64CtzOpI64PopcntOpI64AddOpI64SubOpI64MulOpI64DivSOpI64DivUOpI64RemSOpI64RemUOpI64AndOpI64OrOpI64XorOpI64ShlOpI64ShrSOpI64ShrUOpI64RotlOpI64RotrOpF32AbsOpF32NegOpF32CeilOpF32FloorOpF32TruncOpF32NearestOpF32SqrtOpF32AddOpF32SubOpF32MulOpF32DivOpF32MinOpF32MaxOpF32CopysignOpF64AbsOpF64NegOpF64CeilOpF64FloorOpF64TruncOpF64NearestOpF64SqrtOpF64AddOpF64SubOpF64MulOpF64DivOpF64MinOpF64MaxOpF64CopysignOpI32WrapI64OpI32TruncF32SOpI32TruncF32UOpI32TruncF64SOpI32TruncF64UOpI64ExtendI32SOpI64ExtendI32UOpI64TruncF32SOpI64TruncF32UOpI64TruncF64SOpI64TruncF64UOpF32ConvertI32SOpF32ConvertI32UOpF32ConvertI64SOpF32ConvertI64UOpF32DemoteF64OpF64ConvertI32SOpF64ConvertI32UOpF64ConvertI64SOpF64ConvertI64UOpF64PromoteF32OpI32ReinterpretF32OpI64ReinterpretF64OpF32ReinterpretI32OpF64ReinterpretI64"
)

var (
	_Opcode_index_0 = [...]uint8{0, 13, 18, 25, 31, 35, 41}
	_Opcode_index_1 = [...]uint8{0, 5, 9, 15, 24, 32, 38, 52}
	_Opcode_index_2 = [...]uint8{0, 10, 20, 30, 41, 52}
	_Opcode_index_3 = [...]uint8{0, 9, 18, 27, 36, 47, 58, 70, 82}
	_Opcode_index_4 = [...]uint8{0, 10, 20, 30, 40, 51, 63}
	_Opcode_index_5 = [...]uint16{0, 12, 24, 34, 44, 54, 64, 72, 79, 86, 94, 102, 110, 118, 126, 134, 142, 150, 158, 165, 172, 180, 188, 196, 204, 212, 220, 228, 236, 243, 250, 257, 264, 271, 278, 285, 292, 299, 306, 313, 320, 328, 336, 347, 355, 363, 371, 380, 389, 398, 407, 415, 422, 430, 438, 447, 456, 465, 474, 482, 490, 501, 509, 517, 525, 534, 543, 552, 561, 569, 576, 584, 592, 601, 610, 619, 628, 636, 644, 653, 663, 673, 685, 694, 702, 710, 718, 726, 734, 742, 755, 763, 771, 780, 790, 800, 812, 821, 829, 837, 845, 853, 861, 869, 882, 894, 908, 922, 936, 950, 965, 980, 994, 1008, 1022, 1036, 1052, 1068, 1084, 1100, 1114, 1130, 1146, 1162, 1178, 1193, 1212, 1231, 1250, 1269}
)

func (i Opcode) String() string {
	switch {
	case i <= 5:
		return _Opcode_name_0[_Opcode_index_0[i]:_Opcode_index_0[i+1]]
	case 11 <= i && i <= 17:
		i -= 11
		return _Opcode_name_1[_Opcode_index_1[i]:_Opcode_index_1[i+1]]
	case 32 <= i && i <= 36:
		i -= 32
		return _Opcode_name_2[_Opcode_index_2[i]:_Opcode_index_2[i+1]]
	case 40 <= i && i <= 47:
		i -= 40
		return _Opcode_name_3[_Opcode_index_3[i]:_Opcode_index_3[i+1]]
	case 54 <= i && i <= 59:
		i -= 54
		return _Opcode_name_4[_Opcode_index_4[i]:_Opcode_index_4[i+1]]
	case 63 <= i && i <= 191:
		i -= 63
		return _Opcode_name_5[_Opcode_index_5[i]:_Opcode_index_5[i+1]]
	default:
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
