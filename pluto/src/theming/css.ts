// Copyright 2025 Synnax Labs, Inc.
//
// Use of this software is governed by the Business Source License included in the file
// licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with the Business Source
// License, use of this software will be governed by the Apache License, Version 2.0,
// included in the file licenses/APL.txt.

import { color } from "@synnaxlabs/x";

import { createHexOpacityVariants, CSS, unitProperty } from "@/css";
import { type Theme } from "@/theming/core/theme";

const OPACITIES: readonly number[] = [
  95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5,
];

export const toCSSVars = (
  theme: Theme,
  addPrefix: string = "",
): Record<string, number | string | undefined> =>
  Object.entries({
    "theme-name": theme.name,
    "theme-key": theme.key,
    "primary-m1": color.hex(theme.colors.primary.m1),
    "primary-m1-rgb": color.rgbString(theme.colors.primary.m1),
    "primary-z": color.hex(theme.colors.primary.z),
    "primary-z-rgb": color.rgbString(theme.colors.primary.z),
    "primary-p1": color.hex(theme.colors.primary.p1),
    "primary-p1-rgb": color.rgbString(theme.colors.primary.p1),
    ...createHexOpacityVariants("primary-z", theme.colors.primary.z, OPACITIES),
    "secondary-m1": color.hex(theme.colors.secondary.m1),
    "secondary-z": color.hex(theme.colors.secondary.z),
    "secondary-p1": color.hex(theme.colors.secondary.p1),
    ...createHexOpacityVariants("secondary-z", theme.colors.secondary.z, OPACITIES),
    "gray-l0": color.hex(theme.colors.gray.l0),
    "gray-l0-rgb": color.rgbString(theme.colors.gray.l0),
    ...createHexOpacityVariants("gray-l0", theme.colors.gray.l0, OPACITIES),
    "gray-l1": color.hex(theme.colors.gray.l1),
    ...createHexOpacityVariants("gray-l1", theme.colors.gray.l1, OPACITIES),
    "gray-l2": color.hex(theme.colors.gray.l2),
    ...createHexOpacityVariants("gray-l2", theme.colors.gray.l2, OPACITIES),
    "gray-l3": color.hex(theme.colors.gray.l3),
    ...createHexOpacityVariants("gray-l3", theme.colors.gray.l3, OPACITIES),
    "gray-l4": color.hex(theme.colors.gray.l4),
    ...createHexOpacityVariants("gray-l4", theme.colors.gray.l4, OPACITIES),
    "gray-l5": color.hex(theme.colors.gray.l5),
    ...createHexOpacityVariants("gray-l5", theme.colors.gray.l5, OPACITIES),
    "gray-l6": color.hex(theme.colors.gray.l6),
    ...createHexOpacityVariants("gray-l6", theme.colors.gray.l6, OPACITIES),
    "gray-l7": color.hex(theme.colors.gray.l7),
    ...createHexOpacityVariants("gray-l7", theme.colors.gray.l7, OPACITIES),
    "gray-l8": color.hex(theme.colors.gray.l8),
    ...createHexOpacityVariants("gray-l8", theme.colors.gray.l8, OPACITIES),
    "gray-l9": color.hex(theme.colors.gray.l9),
    ...createHexOpacityVariants("gray-l9", theme.colors.gray.l11, OPACITIES),
    "gray-l10": color.hex(theme.colors.gray.l10),
    ...createHexOpacityVariants("gray-l10", theme.colors.gray.l10, OPACITIES),
    "gray-l11": color.hex(theme.colors.gray.l11),
    ...createHexOpacityVariants("gray-l11", theme.colors.gray.l11, OPACITIES),
    "logo-color": color.cssString(theme.colors.logo),
    "error-m2": color.hex(theme.colors.error.m2),
    "error-m1": color.hex(theme.colors.error.m1),
    "error-z": color.hex(theme.colors.error.z),
    ...createHexOpacityVariants("error-z", theme.colors.error.z, OPACITIES),
    "error-p1": color.hex(theme.colors.error.p1),
    "error-p2": color.hex(theme.colors.error.p2),
    "warning-m2": color.hex(theme.colors.warning.m2),
    "warning-m1": color.hex(theme.colors.warning.m1),
    "warning-z": color.hex(theme.colors.warning.z),
    ...createHexOpacityVariants("warning-z", theme.colors.warning.z, OPACITIES),
    "warning-p1": color.hex(theme.colors.warning.p1),
    "success-m2": color.hex(theme.colors.secondary.m2),
    "success-m1": color.hex(theme.colors.secondary.m1),
    "success-z": color.hex(theme.colors.secondary.z),
    ...createHexOpacityVariants("success-z", theme.colors.secondary.z, OPACITIES),
    "success-p1": color.hex(theme.colors.secondary.p1),
    "success-p2": color.hex(theme.colors.secondary.p2),
    white: color.hex(theme.colors.white),
    "white-rgb": color.rgbString(theme.colors.white),
    black: color.hex(theme.colors.black),
    "black-rgb": color.rgbString(theme.colors.black),
    "text-color": color.hex(theme.colors.text),
    "text-color-rgb": color.rgbString(theme.colors.text),
    "text-on-primary": color.hex(theme.colors.textOnPrimary),
    "border-color": color.hex(theme.colors.border),
    "base-size": unitProperty(theme.sizes.base, "px"),
    "border-radius": unitProperty(theme.sizes.border.radius, "px"),
    "border-width": unitProperty(theme.sizes.border.width, "px"),
    "border-thick-width": unitProperty(theme.sizes.border.thickWidth, "px"),
    "schematic-element-stroke-width": unitProperty(
      theme.sizes.schematic.elementStrokeWidth,
      "px",
    ),
    "font-family": theme.typography.family,
    "code-font-family": theme.typography.codeFamily,
    "h1-size": unitProperty(theme.typography.h1.size, "rem", true),
    "h1-weight": theme.typography.h1.weight,
    "h1-line-height": unitProperty(theme.typography.h1.lineHeight, "rem", true),
    "h2-size": unitProperty(theme.typography.h2.size, "rem", true),
    "h2-weight": theme.typography.h2.weight,
    "h2-line-height": unitProperty(theme.typography.h2.lineHeight, "rem", true),
    "h3-size": unitProperty(theme.typography.h3.size, "rem", true),
    "h3-weight": theme.typography.h3.weight,
    "h3-line-height": unitProperty(theme.typography.h3.lineHeight, "rem", true),
    "h4-size": unitProperty(theme.typography.h4.size, "rem", true),
    "h4-weight": theme.typography.h4.weight,
    "h4-line-height": unitProperty(theme.typography.h4.lineHeight, "rem", true),
    "h5-size": unitProperty(theme.typography.h5.size, "rem", true),
    "h5-weight": theme.typography.h5.weight,
    "h5-line-height": unitProperty(theme.typography.h5.lineHeight, "rem", true),
    "h5-text-transform": theme.typography.h5.textTransform,
    "p-size": unitProperty(theme.typography.p.size, "rem", true),
    "p-weight": theme.typography.p.weight,
    "p-line-height": unitProperty(theme.typography.p.lineHeight, "rem", true),
    "small-size": unitProperty(theme.typography.small.size, "rem", true),
    "small-weight": theme.typography.small.weight,
    "small-line-height": unitProperty(theme.typography.small.lineHeight, "rem", true),
  }).reduce<Record<string, number | string | undefined>>(
    (acc, [key, value]) => ({
      ...acc,
      [CSS.var(addPrefix + key)]: value,
    }),
    {},
  );
