---
# Synnax C++ Linting Configuration
# This configuration enforces code quality, security, and performance standards
# across all C++ codebases (driver, client/cpp, freighter/cpp, x/cpp)

Checks: >
  bugprone-*,
  -bugprone-easily-swappable-parameters,
  cert-*,
  -cert-err58-cpp,
  performance-*,
  modernize-*,
  -modernize-use-designated-initializers,
  -modernize-use-integer-sign-comparison,
  -modernize-use-ranges,
  -modernize-use-trailing-return-type,
  readability-*,
  -readability-braces-around-statements,
  -readability-convert-member-functions-to-static,
  -readability-identifier-length,
  -readability-magic-numbers,
  cppcoreguidelines-*,
  -cppcoreguidelines-avoid-const-or-ref-data-members,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-special-member-functions,
  clang-analyzer-*,
  misc-*,
  -misc-const-correctness,
  -misc-include-cleaner,
  -misc-non-private-member-variables-in-classes,
  -misc-use-internal-linkage,
  portability-*,
  concurrency-*,
  hicpp-*,
  -hicpp-braces-around-statements,
  -hicpp-signed-bitwise,
  -hicpp-special-member-functions,
  google-build-namespaces,
  google-explicit-constructor,
  google-runtime-int,
  google-runtime-operator

# Treat warnings as errors in CI
WarningsAsErrors: '*'

# Use .clang-format file for formatting
FormatStyle: file

CheckOptions:
  # Enforce C++17 standard (no C++20 features)
  - key: modernize-replace-auto-ptr.IncludeStyle
    value: llvm
  - key: modernize-use-nullptr.NullMacros
    value: 'NULL'

  # Naming conventions
  # Classes/Structs: PascalCase
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.StructCase
    value: CamelCase

  # Functions/Methods: snake_case
  - key: readability-identifier-naming.FunctionCase
    value: lower_case
  - key: readability-identifier-naming.MethodCase
    value: lower_case

  # Variables: snake_case
  - key: readability-identifier-naming.VariableCase
    value: lower_case
  - key: readability-identifier-naming.ParameterCase
    value: lower_case
  - key: readability-identifier-naming.MemberCase
    value: lower_case

  # Constants: UPPER_CASE (scream case)
  # Only constexpr enforced - regular const variables ignored if UPPER_CASE
  - key: readability-identifier-naming.ConstexprVariableCase
    value: UPPER_CASE
  - key: readability-identifier-naming.ConstantIgnoredRegexp
    value: '[A-Z][A-Z_0-9]*'

  # Namespaces: lower_case
  - key: readability-identifier-naming.NamespaceCase
    value: lower_case

  # Allow single-letter variable names in limited scopes (loop counters, etc.)
  - key: readability-identifier-naming.IgnoreFailedSplit
    value: true

  # Performance tuning
  - key: performance-move-const-arg.CheckTriviallyCopyableMove
    value: false
  - key: performance-unnecessary-value-param.AllowedTypes
    value: ''

  # Modernize settings
  - key: modernize-use-auto.MinTypeNameLength
    value: 5
  - key: modernize-use-auto.RemoveStars
    value: false

  # Readability settings
  - key: readability-function-cognitive-complexity.Threshold
    value: 50
  - key: readability-function-size.LineThreshold
    value: 200
  - key: readability-function-size.StatementThreshold
    value: 150

# Only check our own headers, not vendor code or system headers
HeaderFilterRegex: '(driver|client/cpp|freighter/cpp|x/cpp)/.*\.(h|hpp)$'

# Use compilation database generated by Bazel
UseColor: true
