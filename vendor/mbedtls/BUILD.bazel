genrule(
    name = "build_mbedtls",
    srcs = glob(["mbedtls/**"]),
    outs = [
        # everest headers
        "include/everest/Hacl_Curve25519.h",
        "include/everest/everest.h",
        "include/everest/kremlib.h",
        "include/everest/x25519.h",
        "include/everest/kremlib/FStar_UInt128.h",
        "include/everest/kremlib/FStar_UInt64_FStar_UInt32_FStar_UInt16_FStar_UInt8.h",
        "include/everest/kremlin/c_endianness.h",
        "include/everest/kremlin/internal/builtin.h",
        "include/everest/kremlin/internal/callconv.h",
        "include/everest/kremlin/internal/compat.h",
        "include/everest/kremlin/internal/debug.h",
        "include/everest/kremlin/internal/target.h",
        "include/everest/kremlin/internal/types.h",
        "include/everest/kremlin/internal/wasmsupport.h",
        "include/everest/vs2013/Hacl_Curve25519.h",
        "include/everest/vs2013/inttypes.h",
        "include/everest/vs2013/stdbool.h",

        # mbedtls headers
        "include/mbedtls/aes.h",
        "include/mbedtls/aria.h",
        "include/mbedtls/asn1.h",
        "include/mbedtls/asn1write.h",
        "include/mbedtls/base64.h",
        "include/mbedtls/bignum.h",
        "include/mbedtls/block_cipher.h",
        "include/mbedtls/build_info.h",
        "include/mbedtls/camellia.h",
        "include/mbedtls/ccm.h",
        "include/mbedtls/chacha20.h",
        "include/mbedtls/chachapoly.h",
        "include/mbedtls/check_config.h",
        "include/mbedtls/cipher.h",
        "include/mbedtls/cmac.h",
        "include/mbedtls/compat-2.x.h",
        "include/mbedtls/config_adjust_legacy_crypto.h",
        "include/mbedtls/config_adjust_legacy_from_psa.h",
        "include/mbedtls/config_adjust_psa_superset_legacy.h",
        "include/mbedtls/config_adjust_psa_from_legacy.h",
        "include/mbedtls/config_adjust_ssl.h",
        "include/mbedtls/config_adjust_x509.h",
        "include/mbedtls/config_psa.h",
        "include/mbedtls/constant_time.h",
        "include/mbedtls/ctr_drbg.h",
        "include/mbedtls/debug.h",
        "include/mbedtls/des.h",
        "include/mbedtls/dhm.h",
        "include/mbedtls/ecdh.h",
        "include/mbedtls/ecdsa.h",
        "include/mbedtls/ecjpake.h",
        "include/mbedtls/ecp.h",
        "include/mbedtls/entropy.h",
        "include/mbedtls/error.h",
        "include/mbedtls/gcm.h",
        "include/mbedtls/hkdf.h",
        "include/mbedtls/hmac_drbg.h",
        "include/mbedtls/lms.h",
        "include/mbedtls/mbedtls_config.h",
        "include/mbedtls/md.h",
        "include/mbedtls/md5.h",
        "include/mbedtls/memory_buffer_alloc.h",
        "include/mbedtls/net_sockets.h",
        "include/mbedtls/nist_kw.h",
        "include/mbedtls/oid.h",
        "include/mbedtls/pem.h",
        "include/mbedtls/pk.h",
        "include/mbedtls/pkcs12.h",
        "include/mbedtls/pkcs5.h",
        "include/mbedtls/pkcs7.h",
        "include/mbedtls/platform.h",
        "include/mbedtls/platform_time.h",
        "include/mbedtls/platform_util.h",
        "include/mbedtls/poly1305.h",
        "include/mbedtls/private_access.h",
        "include/mbedtls/psa_util.h",
        "include/mbedtls/ripemd160.h",
        "include/mbedtls/rsa.h",
        "include/mbedtls/sha1.h",
        "include/mbedtls/sha256.h",
        "include/mbedtls/sha3.h",
        "include/mbedtls/sha512.h",
        "include/mbedtls/ssl.h",
        "include/mbedtls/ssl_cache.h",
        "include/mbedtls/ssl_ciphersuites.h",
        "include/mbedtls/ssl_cookie.h",
        "include/mbedtls/ssl_ticket.h",
        "include/mbedtls/threading.h",
        "include/mbedtls/timing.h",
        "include/mbedtls/version.h",
        "include/mbedtls/x509.h",
        "include/mbedtls/x509_crl.h",
        "include/mbedtls/x509_crt.h",
        "include/mbedtls/x509_csr.h",

        # psa headers
        "include/psa/crypto.h",
        "include/psa/build_info.h",
        "include/psa/crypto_adjust_auto_enabled.h",
        "include/psa/crypto_adjust_config_dependencies.h",
        "include/psa/crypto_adjust_config_key_pair_types.h",
        "include/psa/crypto_adjust_config_synonyms.h",
        "include/psa/crypto_builtin_composites.h",
        "include/psa/crypto_builtin_key_derivation.h",
        "include/psa/crypto_builtin_primitives.h",
        "include/psa/crypto_compat.h",
        "include/psa/crypto_config.h",
        "include/psa/crypto_driver_common.h",
        "include/psa/crypto_driver_contexts_composites.h",
        "include/psa/crypto_driver_contexts_key_derivation.h",
        "include/psa/crypto_driver_contexts_primitives.h",
        "include/psa/crypto_extra.h",
        "include/psa/crypto_legacy.h",
        "include/psa/crypto_platform.h",
        "include/psa/crypto_se_driver.h",
        "include/psa/crypto_sizes.h",
        "include/psa/crypto_struct.h",
        "include/psa/crypto_types.h",
        "include/psa/crypto_values.h",

        # Windows binaries
        "lib/mbedcrypto.lib",
        "lib/mbedtls.lib",
        "lib/mbedx509.lib",
        # Unix binaries
        "lib/libmbedx509.a",
        "lib/libmbedtls.a",
        "lib/libmbedcrypto.a",
    ],
    cmd_bash = select({
        "@platforms//os:windows": """
            rm -rf ./vendor/mbedtls/build && rm -rf ./vendor/mbedtls/out
            mkdir -p ./vendor/mbedtls/build
            cmake -DCMAKE_BUILD_TYPE=Release \\
                  -DCMAKE_INSTALL_PREFIX=./vendor/mbedtls/out \\
                  -DUSE_STATIC_MBEDTLS_LIBRARY=ON \\
                  -DUSE_SHARED_MBEDTLS_LIBRARY=OFF \\
                  -DENABLE_PROGRAMS=OFF \\
                  -DENABLE_TESTING=OFF \\
                  -DINSTALL_MBEDTLS_HEADERS=ON \\
                  -DMBEDTLS_FATAL_WARNINGS=OFF \\
                  -B./vendor/mbedtls/build \\
                  -S./vendor/mbedtls/mbedtls
            cmake --build ./vendor/mbedtls/build --config Release --target install
            cp -R ./vendor/mbedtls/out/lib $(GENDIR)/vendor/mbedtls
            cp -R ./vendor/mbedtls/out/include $(GENDIR)/vendor/mbedtls
            # Create empty Unix libraries to satisfy Bazel
            touch $(GENDIR)/vendor/mbedtls/lib/libmbedcrypto.a
            touch $(GENDIR)/vendor/mbedtls/lib/libmbedtls.a
            touch $(GENDIR)/vendor/mbedtls/lib/libmbedx509.a
        """,
        "//conditions:default": """
            rm -rf ./vendor/mbedtls/build && rm -rf ./vendor/mbedtls/out
            mkdir -p ./vendor/mbedtls/build
            cmake -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX=./vendor/mbedtls/out \
                  -DUSE_STATIC_MBEDTLS_LIBRARY=ON \
                  -DUSE_SHARED_MBEDTLS_LIBRARY=OFF \
                  -DENABLE_PROGRAMS=OFF \
                  -DENABLE_TESTING=OFF \
                  -DINSTALL_MBEDTLS_HEADERS=ON \
                  -DMBEDTLS_FATAL_WARNINGS=OFF \
                  -B./vendor/mbedtls/build \
                  -S./vendor/mbedtls/mbedtls
            cmake --build ./vendor/mbedtls/build --target install
            cp -R ./vendor/mbedtls/out/lib $(GENDIR)/vendor/mbedtls
            cp -R ./vendor/mbedtls/out/include $(GENDIR)/vendor/mbedtls
            # Create empty Windows libraries to satisfy Bazel
            touch $(GENDIR)/vendor/mbedtls/lib/mbedcrypto.lib
            touch $(GENDIR)/vendor/mbedtls/lib/mbedtls.lib
            touch $(GENDIR)/vendor/mbedtls/lib/mbedx509.lib
        """,
    }),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "mbedtls",
    srcs = select({
        "@platforms//os:windows": [
            "lib/mbedcrypto.lib",
            "lib/mbedtls.lib",
            "lib/mbedx509.lib",
        ],
        "//conditions:default": [
            "lib/libmbedcrypto.a",
            "lib/libmbedtls.a",
            "lib/libmbedx509.a",
        ],
    }),
    hdrs = [":build_mbedtls"],
    includes = ["include"],
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)
