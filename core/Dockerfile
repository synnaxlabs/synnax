# syntax=docker/dockerfile:1

# Stage 1: Download dependencies
FROM golang:1.25 AS deps
WORKDIR /workspace

# Copy go.work files first
COPY go.work go.work.sum ./

# Copy go.mod and go.sum files from all modules for better caching
COPY core/go.mod core/go.sum ./core/
COPY freighter/go/go.mod freighter/go/go.sum ./freighter/go/
COPY freighter/integration/go.mod freighter/integration/go.sum ./freighter/integration/
COPY alamos/go/go.mod alamos/go/go.sum ./alamos/go/
COPY x/go/go.mod x/go/go.sum ./x/go/
COPY cesium/go.mod cesium/go.sum ./cesium/
COPY aspen/go.mod aspen/go.sum ./aspen/
COPY arc/go.mod arc/go.sum ./arc/

# Download dependencies with cache mount for go modules
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download

# Stage 2: Build the binary
FROM deps AS builder
WORKDIR /workspace

# Copy source code from all modules
COPY freighter/go ./freighter/go
COPY freighter/integration ./freighter/integration
COPY alamos/go ./alamos/go
COPY x/go ./x/go
COPY cesium ./cesium
COPY aspen ./aspen
COPY arc ./arc
COPY core ./core

# Build with cache mounts for both go modules and build cache
ARG TARGETOS=linux
ARG TARGETARCH=amd64
ARG DRIVER_ENABLED=false
ARG CONSOLE_ENABLED=false
ARG VERSION=dev
ARG GIT_COMMIT=unknown
ARG BUILD_DATE=unknown

WORKDIR /workspace/core

RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    TAGS=""; \
    if [ "$DRIVER_ENABLED" = "true" ]; then \
    TAGS="${TAGS}driver"; \
    fi; \
    if [ "$CONSOLE_ENABLED" = "true" ]; then \
    if [ -n "$TAGS" ]; then TAGS="${TAGS},"; fi; \
    TAGS="${TAGS}console"; \
    fi; \
    LDFLAGS="-w -s -X github.com/synnaxlabs/synnax/pkg/version.Version=${VERSION} -X github.com/synnaxlabs/synnax/pkg/version.GitCommit=${GIT_COMMIT} -X github.com/synnaxlabs/synnax/pkg/version.BuildDate=${BUILD_DATE}"; \
    if [ -n "$TAGS" ]; then \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build -trimpath -tags "$TAGS" -ldflags="${LDFLAGS}" -o synnax .; \
    else \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build -trimpath -ldflags="${LDFLAGS}" -o synnax .; \
    fi

# Stage 3: Minimal runtime image
FROM gcr.io/distroless/static-debian12:nonroot

# Pass build args to final stage
ARG VERSION=dev
ARG GIT_COMMIT=unknown
ARG BUILD_DATE=unknown

# OCI standard labels for image metadata
LABEL org.opencontainers.image.title="Synnax"
LABEL org.opencontainers.image.description="Horizontally-scalable observability and control platform for hardware telemetry systems"
LABEL org.opencontainers.image.vendor="Synnax Labs, Inc."
LABEL org.opencontainers.image.source="https://github.com/synnaxlabs/synnax"
LABEL org.opencontainers.image.documentation="https://docs.synnaxlabs.com"
LABEL org.opencontainers.image.licenses="BSL-1.1"
LABEL org.opencontainers.image.url="https://synnaxlabs.com"
LABEL org.opencontainers.image.version="${VERSION}"
LABEL org.opencontainers.image.revision="${GIT_COMMIT}"
LABEL org.opencontainers.image.created="${BUILD_DATE}"

WORKDIR /synnax

# Copy binary from builder
COPY --from=builder /workspace/core/synnax /synnax/synnax

# Use non-root user for security
USER nonroot:nonroot

# Expose default Synnax port (documentation only)
EXPOSE 9090

# Use SIGTERM for graceful shutdown
STOPSIGNAL SIGTERM

ENTRYPOINT ["/synnax/synnax", "start"]
