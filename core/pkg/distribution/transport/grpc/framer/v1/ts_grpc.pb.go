// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: core/pkg/distribution/transport/grpc/framer/v1/ts.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IteratorService_Iterate_FullMethodName = "/ts.v1.IteratorService/Iterate"
)

// IteratorServiceClient is the client API for IteratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IteratorServiceClient interface {
	Iterate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IteratorRequest, IteratorResponse], error)
}

type iteratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIteratorServiceClient(cc grpc.ClientConnInterface) IteratorServiceClient {
	return &iteratorServiceClient{cc}
}

func (c *iteratorServiceClient) Iterate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IteratorRequest, IteratorResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IteratorService_ServiceDesc.Streams[0], IteratorService_Iterate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IteratorRequest, IteratorResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IteratorService_IterateClient = grpc.BidiStreamingClient[IteratorRequest, IteratorResponse]

// IteratorServiceServer is the server API for IteratorService service.
// All implementations should embed UnimplementedIteratorServiceServer
// for forward compatibility.
type IteratorServiceServer interface {
	Iterate(grpc.BidiStreamingServer[IteratorRequest, IteratorResponse]) error
}

// UnimplementedIteratorServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIteratorServiceServer struct{}

func (UnimplementedIteratorServiceServer) Iterate(grpc.BidiStreamingServer[IteratorRequest, IteratorResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Iterate not implemented")
}
func (UnimplementedIteratorServiceServer) testEmbeddedByValue() {}

// UnsafeIteratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IteratorServiceServer will
// result in compilation errors.
type UnsafeIteratorServiceServer interface {
	mustEmbedUnimplementedIteratorServiceServer()
}

func RegisterIteratorServiceServer(s grpc.ServiceRegistrar, srv IteratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedIteratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IteratorService_ServiceDesc, srv)
}

func _IteratorService_Iterate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IteratorServiceServer).Iterate(&grpc.GenericServerStream[IteratorRequest, IteratorResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IteratorService_IterateServer = grpc.BidiStreamingServer[IteratorRequest, IteratorResponse]

// IteratorService_ServiceDesc is the grpc.ServiceDesc for IteratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IteratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ts.v1.IteratorService",
	HandlerType: (*IteratorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Iterate",
			Handler:       _IteratorService_Iterate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/pkg/distribution/transport/grpc/framer/v1/ts.proto",
}

const (
	RelayService_Relay_FullMethodName = "/ts.v1.RelayService/Relay"
)

// RelayServiceClient is the client API for RelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayServiceClient interface {
	Relay(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RelayRequest, RelayResponse], error)
}

type relayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayServiceClient(cc grpc.ClientConnInterface) RelayServiceClient {
	return &relayServiceClient{cc}
}

func (c *relayServiceClient) Relay(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RelayRequest, RelayResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RelayService_ServiceDesc.Streams[0], RelayService_Relay_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RelayRequest, RelayResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RelayService_RelayClient = grpc.BidiStreamingClient[RelayRequest, RelayResponse]

// RelayServiceServer is the server API for RelayService service.
// All implementations should embed UnimplementedRelayServiceServer
// for forward compatibility.
type RelayServiceServer interface {
	Relay(grpc.BidiStreamingServer[RelayRequest, RelayResponse]) error
}

// UnimplementedRelayServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelayServiceServer struct{}

func (UnimplementedRelayServiceServer) Relay(grpc.BidiStreamingServer[RelayRequest, RelayResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Relay not implemented")
}
func (UnimplementedRelayServiceServer) testEmbeddedByValue() {}

// UnsafeRelayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServiceServer will
// result in compilation errors.
type UnsafeRelayServiceServer interface {
	mustEmbedUnimplementedRelayServiceServer()
}

func RegisterRelayServiceServer(s grpc.ServiceRegistrar, srv RelayServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelayService_ServiceDesc, srv)
}

func _RelayService_Relay_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServiceServer).Relay(&grpc.GenericServerStream[RelayRequest, RelayResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RelayService_RelayServer = grpc.BidiStreamingServer[RelayRequest, RelayResponse]

// RelayService_ServiceDesc is the grpc.ServiceDesc for RelayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ts.v1.RelayService",
	HandlerType: (*RelayServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Relay",
			Handler:       _RelayService_Relay_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/pkg/distribution/transport/grpc/framer/v1/ts.proto",
}

const (
	WriterService_Write_FullMethodName = "/ts.v1.WriterService/Write"
)

// WriterServiceClient is the client API for WriterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriterServiceClient interface {
	Write(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WriterRequest, WriterResponse], error)
}

type writerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWriterServiceClient(cc grpc.ClientConnInterface) WriterServiceClient {
	return &writerServiceClient{cc}
}

func (c *writerServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WriterRequest, WriterResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WriterService_ServiceDesc.Streams[0], WriterService_Write_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WriterRequest, WriterResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WriterService_WriteClient = grpc.BidiStreamingClient[WriterRequest, WriterResponse]

// WriterServiceServer is the server API for WriterService service.
// All implementations should embed UnimplementedWriterServiceServer
// for forward compatibility.
type WriterServiceServer interface {
	Write(grpc.BidiStreamingServer[WriterRequest, WriterResponse]) error
}

// UnimplementedWriterServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWriterServiceServer struct{}

func (UnimplementedWriterServiceServer) Write(grpc.BidiStreamingServer[WriterRequest, WriterResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedWriterServiceServer) testEmbeddedByValue() {}

// UnsafeWriterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriterServiceServer will
// result in compilation errors.
type UnsafeWriterServiceServer interface {
	mustEmbedUnimplementedWriterServiceServer()
}

func RegisterWriterServiceServer(s grpc.ServiceRegistrar, srv WriterServiceServer) {
	// If the following call pancis, it indicates UnimplementedWriterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WriterService_ServiceDesc, srv)
}

func _WriterService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WriterServiceServer).Write(&grpc.GenericServerStream[WriterRequest, WriterResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WriterService_WriteServer = grpc.BidiStreamingServer[WriterRequest, WriterResponse]

// WriterService_ServiceDesc is the grpc.ServiceDesc for WriterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WriterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ts.v1.WriterService",
	HandlerType: (*WriterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _WriterService_Write_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/pkg/distribution/transport/grpc/framer/v1/ts.proto",
}

const (
	DeleteService_Exec_FullMethodName = "/ts.v1.DeleteService/Exec"
)

// DeleteServiceClient is the client API for DeleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteServiceClient interface {
	Exec(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteServiceClient(cc grpc.ClientConnInterface) DeleteServiceClient {
	return &deleteServiceClient{cc}
}

func (c *deleteServiceClient) Exec(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeleteService_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteServiceServer is the server API for DeleteService service.
// All implementations should embed UnimplementedDeleteServiceServer
// for forward compatibility.
type DeleteServiceServer interface {
	Exec(context.Context, *DeleteRequest) (*emptypb.Empty, error)
}

// UnimplementedDeleteServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeleteServiceServer struct{}

func (UnimplementedDeleteServiceServer) Exec(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedDeleteServiceServer) testEmbeddedByValue() {}

// UnsafeDeleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteServiceServer will
// result in compilation errors.
type UnsafeDeleteServiceServer interface {
	mustEmbedUnimplementedDeleteServiceServer()
}

func RegisterDeleteServiceServer(s grpc.ServiceRegistrar, srv DeleteServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeleteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeleteService_ServiceDesc, srv)
}

func _DeleteService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleteService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteServiceServer).Exec(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteService_ServiceDesc is the grpc.ServiceDesc for DeleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ts.v1.DeleteService",
	HandlerType: (*DeleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _DeleteService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/pkg/distribution/transport/grpc/framer/v1/ts.proto",
}
