// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: synnax/pkg/api/grpc/v1/auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthLoginService_Exec_FullMethodName = "/api.v1.AuthLoginService/Exec"
)

// AuthLoginServiceClient is the client API for AuthLoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthLoginServiceClient interface {
	Exec(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authLoginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthLoginServiceClient(cc grpc.ClientConnInterface) AuthLoginServiceClient {
	return &authLoginServiceClient{cc}
}

func (c *authLoginServiceClient) Exec(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthLoginService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthLoginServiceServer is the server API for AuthLoginService service.
// All implementations should embed UnimplementedAuthLoginServiceServer
// for forward compatibility
type AuthLoginServiceServer interface {
	Exec(context.Context, *LoginRequest) (*LoginResponse, error)
}

// UnimplementedAuthLoginServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthLoginServiceServer struct {
}

func (UnimplementedAuthLoginServiceServer) Exec(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeAuthLoginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthLoginServiceServer will
// result in compilation errors.
type UnsafeAuthLoginServiceServer interface {
	mustEmbedUnimplementedAuthLoginServiceServer()
}

func RegisterAuthLoginServiceServer(s grpc.ServiceRegistrar, srv AuthLoginServiceServer) {
	s.RegisterService(&AuthLoginService_ServiceDesc, srv)
}

func _AuthLoginService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthLoginServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthLoginService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthLoginServiceServer).Exec(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthLoginService_ServiceDesc is the grpc.ServiceDesc for AuthLoginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthLoginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.AuthLoginService",
	HandlerType: (*AuthLoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _AuthLoginService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synnax/pkg/api/grpc/v1/auth.proto",
}
