// Copyright 2025 Synnax Labs, Inc.
//
// Use of this software is governed by the Business Source License included in the file
// licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with the Business Source
// License, use of this software will be governed by the Apache License, Version 2.0,
// included in the file licenses/APL.txt.

syntax = "proto3";

package api.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/synnaxlabs/synnax/pkg/api/grpc/v1";

service ArcCreateService {
  rpc Exec(ArcCreateRequest) returns (ArcCreateResponse) {}
}

service ArcRetrieveService {
  rpc Exec(ArcRetrieveRequest) returns (ArcRetrieveResponse) {}
}

service ArcDeleteService {
  rpc Exec(ArcDeleteRequest) returns (google.protobuf.Empty) {}
}

// XY represents a 2D coordinate
message XY {
  float x = 1;
  float y = 2;
}

// Viewport represents the visual viewport state
message Viewport {
  XY position = 1;
  float zoom = 2;
}

// TypeKind represents Arc type kinds
enum TypeKind {
  TYPE_INVALID = 0;
  TYPE_U8 = 1;
  TYPE_U16 = 2;
  TYPE_U32 = 3;
  TYPE_U64 = 4;
  TYPE_I8 = 5;
  TYPE_I16 = 6;
  TYPE_I32 = 7;
  TYPE_I64 = 8;
  TYPE_F32 = 9;
  TYPE_F64 = 10;
  TYPE_STRING = 11;
  TYPE_TIMESTAMP = 12;
  TYPE_TIMESPAN = 13;
  TYPE_CHAN = 14;
  TYPE_SERIES = 15;
}

// Type represents an Arc type with optional element type
message Type {
  TypeKind kind = 1;
  Type elem = 2;  // For series/chan element types
}

// Params represents named parameters
message Params {
  repeated string keys = 1;
  map<string, Type> values = 2;
}

// Handle references a node's parameter
message Handle {
  string node = 1;
  string param = 2;
}

// Edge connects two handles
message Edge {
  Handle source = 1;
  Handle target = 2;
}

// Channels represents channel references
message Channels {
  map<uint32, string> read = 1;   // channel_key -> param_name
  map<uint32, string> write = 2;  // channel_key -> param_name
}

// Function represents a function template
message Function {
  string key = 1;
  string raw_body = 2;
  Params config = 3;
  Params inputs = 4;
  Params outputs = 5;
  Channels channels = 6;
}

// GraphNode represents a visual node in the graph
message GraphNode {
  string key = 1;
  string type = 2;
  // config values stored as JSON-compatible map
  map<string, google.protobuf.Value> config = 3;
  XY position = 4;
}

// Graph represents a complete visual graph
message Graph {
  Viewport viewport = 1;
  repeated Function functions = 2;
  repeated Edge edges = 3;
  repeated GraphNode nodes = 4;
}

// Text represents Arc source code
message Text {
  string raw = 1;
}

// Arc represents an Arc automation program
message Arc {
  string key = 1;
  string name = 2;
  Graph graph = 3;
  Text text = 4;
  bool deploy = 5;
  string version = 6;
}

message ArcCreateRequest {
  repeated Arc arcs = 1;
}

message ArcCreateResponse {
  repeated Arc arcs = 1;
}

message ArcRetrieveRequest {
  repeated string keys = 1;
  repeated string names = 2;
  string search_term = 3;
  int32 limit = 4;
  int32 offset = 5;
  bool include_status = 6;
}

message ArcRetrieveResponse {
  repeated Arc arcs = 1;
}

message ArcDeleteRequest {
  repeated string keys = 1;
}
