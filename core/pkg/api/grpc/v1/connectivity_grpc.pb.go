// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: synnax/pkg/api/grpc/v1/connectivity.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectivityService_Exec_FullMethodName = "/api.v1.ConnectivityService/Exec"
)

// ConnectivityServiceClient is the client API for ConnectivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectivityServiceClient interface {
	Exec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConnectivityCheckResponse, error)
}

type connectivityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectivityServiceClient(cc grpc.ClientConnInterface) ConnectivityServiceClient {
	return &connectivityServiceClient{cc}
}

func (c *connectivityServiceClient) Exec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConnectivityCheckResponse, error) {
	out := new(ConnectivityCheckResponse)
	err := c.cc.Invoke(ctx, ConnectivityService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectivityServiceServer is the server API for ConnectivityService service.
// All implementations should embed UnimplementedConnectivityServiceServer
// for forward compatibility
type ConnectivityServiceServer interface {
	Exec(context.Context, *emptypb.Empty) (*ConnectivityCheckResponse, error)
}

// UnimplementedConnectivityServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectivityServiceServer struct {
}

func (UnimplementedConnectivityServiceServer) Exec(context.Context, *emptypb.Empty) (*ConnectivityCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeConnectivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectivityServiceServer will
// result in compilation errors.
type UnsafeConnectivityServiceServer interface {
	mustEmbedUnimplementedConnectivityServiceServer()
}

func RegisterConnectivityServiceServer(s grpc.ServiceRegistrar, srv ConnectivityServiceServer) {
	s.RegisterService(&ConnectivityService_ServiceDesc, srv)
}

func _ConnectivityService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectivityServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectivityService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectivityServiceServer).Exec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectivityService_ServiceDesc is the grpc.ServiceDesc for ConnectivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ConnectivityService",
	HandlerType: (*ConnectivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ConnectivityService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synnax/pkg/api/grpc/v1/connectivity.proto",
}
