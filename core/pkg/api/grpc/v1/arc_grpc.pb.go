// Copyright 2025 Synnax Labs, Inc.
//
// Use of this software is governed by the Business Source License included in the file
// licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with the Business Source
// License, use of this software will be governed by the Apache License, Version 2.0,
// included in the file licenses/APL.txt.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: core/pkg/api/grpc/v1/arc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArcCreateService_Exec_FullMethodName = "/api.v1.ArcCreateService/Exec"
)

// ArcCreateServiceClient is the client API for ArcCreateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArcCreateServiceClient interface {
	Exec(ctx context.Context, in *ArcCreateRequest, opts ...grpc.CallOption) (*ArcCreateResponse, error)
}

type arcCreateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArcCreateServiceClient(cc grpc.ClientConnInterface) ArcCreateServiceClient {
	return &arcCreateServiceClient{cc}
}

func (c *arcCreateServiceClient) Exec(ctx context.Context, in *ArcCreateRequest, opts ...grpc.CallOption) (*ArcCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArcCreateResponse)
	err := c.cc.Invoke(ctx, ArcCreateService_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArcCreateServiceServer is the server API for ArcCreateService service.
// All implementations should embed UnimplementedArcCreateServiceServer
// for forward compatibility.
type ArcCreateServiceServer interface {
	Exec(context.Context, *ArcCreateRequest) (*ArcCreateResponse, error)
}

// UnimplementedArcCreateServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArcCreateServiceServer struct{}

func (UnimplementedArcCreateServiceServer) Exec(context.Context, *ArcCreateRequest) (*ArcCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedArcCreateServiceServer) testEmbeddedByValue() {}

// UnsafeArcCreateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArcCreateServiceServer will
// result in compilation errors.
type UnsafeArcCreateServiceServer interface {
	mustEmbedUnimplementedArcCreateServiceServer()
}

func RegisterArcCreateServiceServer(s grpc.ServiceRegistrar, srv ArcCreateServiceServer) {
	// If the following call pancis, it indicates UnimplementedArcCreateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArcCreateService_ServiceDesc, srv)
}

func _ArcCreateService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcCreateServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArcCreateService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcCreateServiceServer).Exec(ctx, req.(*ArcCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArcCreateService_ServiceDesc is the grpc.ServiceDesc for ArcCreateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArcCreateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ArcCreateService",
	HandlerType: (*ArcCreateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ArcCreateService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/pkg/api/grpc/v1/arc.proto",
}

const (
	ArcRetrieveService_Exec_FullMethodName = "/api.v1.ArcRetrieveService/Exec"
)

// ArcRetrieveServiceClient is the client API for ArcRetrieveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArcRetrieveServiceClient interface {
	Exec(ctx context.Context, in *ArcRetrieveRequest, opts ...grpc.CallOption) (*ArcRetrieveResponse, error)
}

type arcRetrieveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArcRetrieveServiceClient(cc grpc.ClientConnInterface) ArcRetrieveServiceClient {
	return &arcRetrieveServiceClient{cc}
}

func (c *arcRetrieveServiceClient) Exec(ctx context.Context, in *ArcRetrieveRequest, opts ...grpc.CallOption) (*ArcRetrieveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArcRetrieveResponse)
	err := c.cc.Invoke(ctx, ArcRetrieveService_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArcRetrieveServiceServer is the server API for ArcRetrieveService service.
// All implementations should embed UnimplementedArcRetrieveServiceServer
// for forward compatibility.
type ArcRetrieveServiceServer interface {
	Exec(context.Context, *ArcRetrieveRequest) (*ArcRetrieveResponse, error)
}

// UnimplementedArcRetrieveServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArcRetrieveServiceServer struct{}

func (UnimplementedArcRetrieveServiceServer) Exec(context.Context, *ArcRetrieveRequest) (*ArcRetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedArcRetrieveServiceServer) testEmbeddedByValue() {}

// UnsafeArcRetrieveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArcRetrieveServiceServer will
// result in compilation errors.
type UnsafeArcRetrieveServiceServer interface {
	mustEmbedUnimplementedArcRetrieveServiceServer()
}

func RegisterArcRetrieveServiceServer(s grpc.ServiceRegistrar, srv ArcRetrieveServiceServer) {
	// If the following call pancis, it indicates UnimplementedArcRetrieveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArcRetrieveService_ServiceDesc, srv)
}

func _ArcRetrieveService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcRetrieveServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArcRetrieveService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcRetrieveServiceServer).Exec(ctx, req.(*ArcRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArcRetrieveService_ServiceDesc is the grpc.ServiceDesc for ArcRetrieveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArcRetrieveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ArcRetrieveService",
	HandlerType: (*ArcRetrieveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ArcRetrieveService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/pkg/api/grpc/v1/arc.proto",
}

const (
	ArcDeleteService_Exec_FullMethodName = "/api.v1.ArcDeleteService/Exec"
)

// ArcDeleteServiceClient is the client API for ArcDeleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArcDeleteServiceClient interface {
	Exec(ctx context.Context, in *ArcDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type arcDeleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArcDeleteServiceClient(cc grpc.ClientConnInterface) ArcDeleteServiceClient {
	return &arcDeleteServiceClient{cc}
}

func (c *arcDeleteServiceClient) Exec(ctx context.Context, in *ArcDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ArcDeleteService_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArcDeleteServiceServer is the server API for ArcDeleteService service.
// All implementations should embed UnimplementedArcDeleteServiceServer
// for forward compatibility.
type ArcDeleteServiceServer interface {
	Exec(context.Context, *ArcDeleteRequest) (*emptypb.Empty, error)
}

// UnimplementedArcDeleteServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArcDeleteServiceServer struct{}

func (UnimplementedArcDeleteServiceServer) Exec(context.Context, *ArcDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedArcDeleteServiceServer) testEmbeddedByValue() {}

// UnsafeArcDeleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArcDeleteServiceServer will
// result in compilation errors.
type UnsafeArcDeleteServiceServer interface {
	mustEmbedUnimplementedArcDeleteServiceServer()
}

func RegisterArcDeleteServiceServer(s grpc.ServiceRegistrar, srv ArcDeleteServiceServer) {
	// If the following call pancis, it indicates UnimplementedArcDeleteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArcDeleteService_ServiceDesc, srv)
}

func _ArcDeleteService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcDeleteServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArcDeleteService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcDeleteServiceServer).Exec(ctx, req.(*ArcDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArcDeleteService_ServiceDesc is the grpc.ServiceDesc for ArcDeleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArcDeleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ArcDeleteService",
	HandlerType: (*ArcDeleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ArcDeleteService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/pkg/api/grpc/v1/arc.proto",
}
