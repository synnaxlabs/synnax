# Disable Bzlmod (Bazel Modules)
# We need the last flag to avoid issues with rules_proto_grpc
# See https://github.com/rules-proto-grpc/rules_proto_grpc/issues/390 for info
common --enable_bzlmod=true --enable_workspace=false --noincompatible_disallow_ctx_resolve_tools  --define=protobuf_allow_msvc=true

# Enable platform-specific configs
build --enable_platform_specific_config

# These hide symbols from the linker in order to prevent symbols collisions with
# libraries we load dynamically at runtime (LabJack is the primary source of this issue,
# as it relies an incompatible, legacy GRPC version).
build:hide_symbols --copt=-fvisibility=hidden --cxxopt=-fvisibility-inlines-hidden

# ===== Platform-Specific Compiler Settings =====

# macOS (Apple Silicon)
build:macos --cpu=darwin_arm64
build:macos --cxxopt=-std=c++20
build:macos --host_cxxopt=-std=c++20

# Linux
build:linux --cxxopt=-std=c++17
build:linux --host_cxxopt=-std=c++17
build:linux --copt=-Wno-error

# Windows (MSVC)
build:windows --enable_runfiles
build:windows --cxxopt=/std:c++20
build:windows --host_cxxopt=/std:c++20
build:windows --per_file_copt=external/.*@/w
build:windows --per_file_copt=vendor/.*@/w

# ===== Warning Suppression for External Dependencies =====

# Only show output from workspace targets (filters out external dependency noise)
build --output_filter=^//

# Suppress warnings from external dependencies (Bazel modules and vendor/)
build --per_file_copt=external/.*@-w
build --per_file_copt=.*\\.cache/bazel/.*@-w
build --per_file_copt=vendor/.*@-w

# Keep strict warnings for workspace code
build --copt=-Wall
build --cxxopt=-Wall

# ===== Optimization Flags (used with -c opt) =====

build:opt --compilation_mode=opt
build:opt --strip=always

# Platform-agnostic optimization
build:opt --copt=-O3
build:opt --copt=-flto
build:opt --linkopt=-flto

# ===== Sanitizers (Memory/Undefined Behavior Detection) =====

# AddressSanitizer (ASan) - Detects memory errors
# - Heap/stack buffer overflows
# - Use-after-free
# - Double-free
# - Memory leaks (via LeakSanitizer on Linux only)
build:asan --copt=-fsanitize=address
build:asan --copt=-fno-omit-frame-pointer
build:asan --copt=-O1
build:asan --copt=-g
build:asan --copt=-fno-optimize-sibling-calls
build:asan --linkopt=-fsanitize=address
build:asan --action_env=ASAN_OPTIONS=abort_on_error=1:halt_on_error=1:detect_stack_use_after_return=1
build:asan --test_env=ASAN_OPTIONS=abort_on_error=1:halt_on_error=1:detect_stack_use_after_return=1
build:asan --test_timeout=120,600,1800,3600  # ASan adds ~2-3x overhead

# ASan with LeakSanitizer (Linux only - LSan not supported on macOS/Windows)
build:asan-leak --config=asan
build:asan-leak --copt=-fsanitize=leak
build:asan-leak --linkopt=-fsanitize=leak
build:asan-leak --action_env=ASAN_OPTIONS=detect_leaks=1:abort_on_error=1:halt_on_error=1:detect_stack_use_after_return=1
build:asan-leak --test_env=ASAN_OPTIONS=detect_leaks=1:abort_on_error=1:halt_on_error=1:detect_stack_use_after_return=1

# LeakSanitizer (LSan) - Standalone leak detection (Linux only)
build:lsan --copt=-fsanitize=leak
build:lsan --copt=-fno-omit-frame-pointer
build:lsan --copt=-g
build:lsan --linkopt=-fsanitize=leak
build:lsan --action_env=LSAN_OPTIONS=suppressions=scripts/sanitizers/lsan_suppressions.txt
build:lsan --test_env=LSAN_OPTIONS=suppressions=scripts/sanitizers/lsan_suppressions.txt

# UndefinedBehaviorSanitizer (UBSan) - Detects undefined behavior
# - Integer overflow
# - Null pointer dereference
# - Misaligned pointer access
# - Division by zero
# - Invalid enum values
build:ubsan --copt=-fsanitize=undefined
build:ubsan --copt=-fno-sanitize-recover=undefined
build:ubsan --copt=-fno-omit-frame-pointer
build:ubsan --copt=-g
build:ubsan --linkopt=-fsanitize=undefined
build:ubsan --action_env=UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1
build:ubsan --test_env=UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1

# Combined sanitizers (recommended for local development)
build:sanitize --config=asan
build:sanitize --config=ubsan

# Sanitizers for CI (optimized settings)
build:sanitize-ci --config=sanitize
build:sanitize-ci --test_output=errors
build:sanitize-ci --test_summary=detailed