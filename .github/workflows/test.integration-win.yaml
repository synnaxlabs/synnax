name: Test - Run Integration Tests on Windows

on:
  push:
    branches:
      - "sy-2746-ni-device-scanner-detection-failure"
  workflow_dispatch:

env:
  CACHE_SCOPE: build-synnax

jobs:
  build:
    name: Build Synnax
    runs-on: [self-hosted, windows]
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Force Quit Synnax Processes
        run: |
          mkdir -p $HOME/Desktop || true
          rm -rf $HOME/Desktop/* || true
          echo "Checking for existing synnax processes..."
          taskkill //F //IM "*synnax*" 2>nul || echo "No synnax processes found"
        shell: bash

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Install Dependencies
        run: |
          echo "Installing required build tools..."
          choco install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools"
          choco install -y cmake
          choco install -y git
        shell: bash

      - name: Setup Bazel
        run: |
          if command -v bazelisk &> /dev/null; then
            echo "Bazelisk already installed, using cached version"
            bazelisk --version
          else
            echo "Installing Bazelisk..."
            curl -L -o bazelisk.exe https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-windows-amd64.exe
            mv bazelisk.exe /usr/bin/bazelisk.exe
            ln -sf /usr/bin/bazelisk.exe /usr/bin/bazel.exe
          fi
        shell: bash

      - name: Build Driver
        run: |
          bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc //driver
        shell: bash

      - name: Get Version
        id: version
        working-directory: synnax
        run: |
          echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

      - name: Move Driver to Assets
        run: |
          mkdir -p synnax/pkg/service/hardware/embedded/assets
          cp bazel-bin/driver/driver.exe synnax/pkg/service/hardware/embedded/assets/driver.exe

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Download Go Dependencies
        working-directory: synnax
        run: go mod download

      - name: Build Synnax Server
        working-directory: synnax
        run: |
          export GOOS=windows
          export GOARCH=amd64
          go build -tags driver -o synnax-v${{ steps.version.outputs.VERSION }}-windows.exe

      - name: Copy Binaries to Desktop
        run: |
          cp bazel-bin/driver/driver.exe $HOME/Desktop/synnax-driver.exe
          cp synnax/synnax-v${{ steps.version.outputs.VERSION }}-windows.exe $HOME/Desktop/synnax.exe
          echo "Binaries created in $HOME/Desktop:"
          ls -la $HOME/Desktop/synnax*

  deploy:
    name: Deploy Synnax Service
    runs-on: [self-hosted, windows]
    needs: build
    steps:
      - name: Install and Start Synnax as Service
        run: |
          echo Creating necessary directories...
          if not exist "C:\synnax-driver" mkdir "C:\synnax-driver"
          if not exist "%USERPROFILE%\synnax-data" mkdir "%USERPROFILE%\synnax-data"
          
          echo Stopping existing Synnax service if running...
          sc stop "Synnax" 2>nul
          if errorlevel 1 echo No existing service to stop
          sc delete "Synnax" 2>nul
          if errorlevel 1 echo No existing service to delete
          
          echo Creating Windows service...
          sc create "Synnax" binpath="%USERPROFILE%\Desktop\synnax.exe start -mi" start=auto
          sc config "Synnax" obj="LocalSystem"
          sc description "Synnax" "Synnax Server for telemetry and control"
          
          echo Starting Synnax service...
          sc start "Synnax"
          
          echo Waiting for service to start...
          timeout /t 15 /nobreak >nul
          
          echo Verifying service is running and responding...
          sc query "Synnax" | find "RUNNING" >nul
          if errorlevel 1 goto service_failed
          echo Service is running, checking port 9090...
          for /l %%i in (1,1,10) do (
            netstat -an | find ":9090" >nul && goto port_ready
            timeout /t 1 /nobreak >nul
          )
          echo Service is running but not responding on port 9090
          sc query "Synnax"
          exit /b 1
          :port_ready
          echo Synnax service is running and responding on port 9090
          goto service_end
          :service_failed
          echo Service failed to start
          sc query "Synnax"
          exit /b 1
          :service_end
        shell: cmd

  test:
    name: Run Test Conductor
    runs-on: [self-hosted, windows]
    needs: deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Poetry
        run: |
          echo Installing Poetry...
          curl -sSL https://install.python-poetry.org | python -
          set PATH=%USERPROFILE%\.local\bin;%PATH%
          poetry --version
        shell: cmd

      - name: Install Dependencies
        working-directory: integration/py
        run: |
          set PATH=%USERPROFILE%\.local\bin;%PATH%
          poetry env remove --all 2>nul
          if errorlevel 1 echo No environments to remove
          poetry add "pydantic>=2.11.5,<3.0" --no-cache
          poetry install --no-cache
        shell: cmd

      - name: Debug Imports
        working-directory: integration/py
        run: |
          set PATH=%USERPROFILE%\.local\bin;%PATH%
          poetry run python -c "import synnax; print('Synnax imported successfully'); import matplotlib; matplotlib.use('Agg'); import matplotlib.pyplot; print('Matplotlib imported successfully')"
        shell: cmd

      - name: Test Conductor
        working-directory: integration/test/py/framework
        run: |
          set PATH=%USERPROFILE%\.local\bin;%PATH%
          poetry run --directory ../../py python framework/Test_Conducter.py --name test_conductor --sequence ../testcases/basic_tests.json
        shell: cmd

      - name: Upload Benchmark Plot
        uses: actions/upload-artifact@v4
        if: always()  # Run even if tests fail
        with:
          name: benchmark-plots
          path: |
            integration/test/py/*.png
            integration/test/py/framework/*.png
          retention-days: 30