name: Test - Run Integration Tests on Windows

on:
  push:
    branches:
      - "None"
  workflow_dispatch:

env:
  CACHE_SCOPE: build-synnax

jobs:
  build:
    name: Build Synnax
    runs-on: [self-hosted, windows]
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Force Quit Synnax Processes
        run: |
          New-Item -ItemType Directory -Path "$env:USERPROFILE\Desktop" -Force -ErrorAction SilentlyContinue
          Write-Host "Cleaning up old synnax binaries..."
          Remove-Item "$env:USERPROFILE\Desktop\synnax*" -Force -ErrorAction SilentlyContinue
          Write-Host "Checking for existing synnax processes..."
          $processes = Get-Process | Where-Object {$_.ProcessName -like "*synnax*"}
          if ($processes) {
            Write-Host "Found synnax processes. Terminating..."
            $processes | Stop-Process -Force
            Write-Host "All synnax processes terminated."
          } else {
            Write-Host "No synnax processes found."
          }

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Chocolatey
        run: |
          Write-Host "Installing Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install Build Tools
        run: |
          Write-Host "Installing Visual Studio Build Tools..."
          & "$env:ProgramData\chocolatey\bin\choco.exe" install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools"
          
      - name: Install Additional Tools  
        run: |
          Write-Host "Installing CMake and Git..."
          & "$env:ProgramData\chocolatey\bin\choco.exe" install -y cmake git

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        run: |
          if (Get-Command bazelisk -ErrorAction SilentlyContinue) {
            Write-Host "Bazelisk already installed, using cached version"
            bazelisk --version
          } else {
            Write-Host "Installing Bazelisk..."
            Invoke-WebRequest -Uri "https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-windows-amd64.exe" -OutFile "bazelisk.exe"
            Move-Item "bazelisk.exe" "C:\Windows\System32\bazelisk.exe"
            Copy-Item "C:\Windows\System32\bazelisk.exe" "C:\Windows\System32\bazel.exe"
          }

      - name: Build Driver
        run: |
          bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc //driver

      - name: Get Version
        id: version
        working-directory: synnax
        run: |
          $version = Get-Content pkg/version/VERSION
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT

      - name: Move Driver to Assets
        run: |
          New-Item -ItemType Directory -Path "synnax/pkg/service/hardware/embedded/assets" -Force
          Copy-Item "bazel-bin/driver/driver.exe" "synnax/pkg/service/hardware/embedded/assets/driver.exe"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Download Go Dependencies
        working-directory: synnax
        run: go mod download

      - name: Build Synnax Server
        working-directory: synnax
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          go build -tags driver -o synnax-v${{ steps.version.outputs.VERSION }}-windows.exe

      - name: Copy Binaries to Desktop
        run: |
          Copy-Item "bazel-bin/driver/driver.exe" "$env:USERPROFILE/Desktop/synnax-driver.exe"
          Copy-Item "synnax/synnax-v${{ steps.version.outputs.VERSION }}-windows.exe" "$env:USERPROFILE/Desktop/synnax.exe"
          Write-Host "Binaries created in $env:USERPROFILE/Desktop:"
          Get-ChildItem "$env:USERPROFILE/Desktop/synnax*"

  deploy:
    name: Deploy Synnax Service
    runs-on: [self-hosted, windows]
    needs: build
    steps:
      - name: Install and Start Synnax as Service
        run: |
          Write-Host "Creating necessary directories..."
          New-Item -ItemType Directory -Path "C:\synnax-driver" -Force -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path "$env:USERPROFILE\synnax-data" -Force -ErrorAction SilentlyContinue
          
          Write-Host "Stopping existing Synnax service if running..."
          sc.exe stop "Synnax" 2>$null
          if ($LASTEXITCODE -ne 0) { Write-Host "No existing service to stop" }
          sc.exe delete "Synnax" 2>$null
          if ($LASTEXITCODE -ne 0) { Write-Host "No existing service to delete" }
          
          Write-Host "Creating Windows service..."
          sc.exe create "Synnax" binpath="$env:USERPROFILE\Desktop\synnax.exe start -mi" start=auto
          sc.exe config "Synnax" obj="LocalSystem"
          sc.exe description "Synnax" "Synnax Server for telemetry and control"
          
          Write-Host "Starting Synnax service..."
          sc.exe start "Synnax"
          
          Write-Host "Waiting for service to start..."
          Start-Sleep -Seconds 15
          
          Write-Host "Verifying service is running and responding..."
          $serviceStatus = sc.exe query "Synnax" | Select-String "RUNNING"
          if (-not $serviceStatus) {
            Write-Host "Service failed to start"
            sc.exe query "Synnax"
            exit 1
          }
          
          Write-Host "Service is running, checking port 9090..."
          $portReady = $false
          for ($i = 1; $i -le 10; $i++) {
            $portCheck = netstat -an | Select-String ":9090"
            if ($portCheck) {
              $portReady = $true
              break
            }
            Start-Sleep -Seconds 1
          }
          
          if ($portReady) {
            Write-Host "Synnax service is running and responding on port 9090"
          } else {
            Write-Host "Service is running but not responding on port 9090"
            sc.exe query "Synnax"
            exit 1
          }

  test:
    name: Run Test Conductor
    runs-on: [self-hosted, windows]
    needs: deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Poetry
        run: |
          echo Installing Poetry...
          curl -sSL https://install.python-poetry.org | python -
          set PATH=%USERPROFILE%\.local\bin;%PATH%
          poetry --version
        shell: cmd

      - name: Install Dependencies
        working-directory: integration/py
        run: |
          set PATH=%USERPROFILE%\.local\bin;%PATH%
          poetry env remove --all 2>nul
          if errorlevel 1 echo No environments to remove
          poetry add "pydantic>=2.11.5,<3.0" --no-cache
          poetry install --no-cache
        shell: cmd

      - name: Debug Imports
        working-directory: integration/py
        run: |
          set PATH=%USERPROFILE%\.local\bin;%PATH%
          poetry run python -c "import synnax; print('Synnax imported successfully'); import matplotlib; matplotlib.use('Agg'); import matplotlib.pyplot; print('Matplotlib imported successfully')"
        shell: cmd

      - name: Test Conductor
        working-directory: integration/test/py/framework
        run: |
          set PATH=%USERPROFILE%\.local\bin;%PATH%
          poetry run --directory ../../py python framework/Test_Conducter.py --name test_conductor --sequence ../testcases/basic_tests.json
        shell: cmd

      - name: Upload Benchmark Plot
        uses: actions/upload-artifact@v4
        if: always()  # Run even if tests fail
        with:
          name: benchmark-plots
          path: |
            integration/test/py/*.png
            integration/test/py/framework/*.png
          retention-days: 30