name: Deploy - Python

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/deploy.py.yaml
      - alamos/py/pyproject.toml
      - freighter/py/pyproject.toml
      - client/py/pyproject.toml
  workflow_dispatch:

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    env:
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: client/py/pyproject.toml
          cache: poetry

      # Version Checking Steps
      - name: Check Alamos Version
        id: alamos
        working-directory: alamos/py
        run: |
          LOCAL_VERSION=$(poetry version -s)
          PYPI_VERSION=$(curl -s https://pypi.org/pypi/alamos/json | jq -r '.info.version' || echo "0.0.0")
          echo "Alamos - Local: $LOCAL_VERSION, PyPI: $PYPI_VERSION"
          if [ "$LOCAL_VERSION" != "$PYPI_VERSION" ]; then
            echo "publish=true" >> $GITHUB_OUTPUT
          else
            echo "publish=false" >> $GITHUB_OUTPUT
          fi
          echo "local=$LOCAL_VERSION" >> $GITHUB_OUTPUT

      - name: Check Freighter Version
        id: freighter
        working-directory: freighter/py
        run: |
          LOCAL_VERSION=$(poetry version -s)
          PYPI_VERSION=$(curl -s https://pypi.org/pypi/synnax-freighter/json | jq -r '.info.version' || echo "0.0.0")
          echo "Freighter - Local: $LOCAL_VERSION, PyPI: $PYPI_VERSION"
          if [ "$LOCAL_VERSION" != "$PYPI_VERSION" ]; then
            echo "publish=true" >> $GITHUB_OUTPUT
          else
            echo "publish=false" >> $GITHUB_OUTPUT
          fi
          echo "local=$LOCAL_VERSION" >> $GITHUB_OUTPUT

      - name: Check Client Version
        id: client
        working-directory: client/py
        run: |
          LOCAL_VERSION=$(poetry version -s)
          PYPI_VERSION=$(curl -s https://pypi.org/pypi/synnax/json | jq -r '.info.version' || echo "0.0.0")
          echo "Client - Local: $LOCAL_VERSION, PyPI: $PYPI_VERSION"
          if [ "$LOCAL_VERSION" != "$PYPI_VERSION" ]; then
            echo "publish=true" >> $GITHUB_OUTPUT
          else
            echo "publish=false" >> $GITHUB_OUTPUT
          fi
          echo "local=$LOCAL_VERSION" >> $GITHUB_OUTPUT

      # Publishing Steps

      - name: Publish Alamos
        if: steps.alamos.outputs.publish == 'true'
        working-directory: alamos/py
        run: |
          echo "Publishing alamos (new version: $(poetry version -s))"
          poetry lock -n
          poetry install -n
          poetry publish --build --no-interaction

      - name: Publish Freighter
        if: steps.freighter.outputs.publish == 'true'
        working-directory: freighter/py
        run: |
          echo "Updating dependency for alamos to version ^${{ steps.alamos.outputs.local }}"
          sed -i -E "/^\[tool\.poetry\.dependencies\]$/,/^\[.*\]$/ s/alamos = .*/alamos = \"^${{ steps.alamos.outputs.local }}\"/" pyproject.toml
          echo "Publishing freighter (new version: $(poetry version -s))"
          until poetry lock -n; do
            poetry cache clear --all -n .
            sleep 1
          done
          poetry install -n
          poetry publish --build --no-interaction

      - name: Publish Client
        if: steps.client.outputs.publish == 'true'
        working-directory: client/py
        run: |
          echo "Updating dependency for alamos to version ^${{ steps.alamos.outputs.local }}"
          sed -i -E "/^\[tool\.poetry\.dependencies\]$/,/^\[.*\]$/ s/alamos = .*/alamos = \"^${{ steps.alamos.outputs.local }}\"/" pyproject.toml
          echo "Updating dependency for synnax-freighter to version ^${{ steps.freighter.outputs.local }}"
          sed -i -E "/^\[tool\.poetry\.dependencies\]$/,/^\[.*\]$/ s/synnax-freighter = .*/synnax-freighter = \"^${{ steps.freighter.outputs.local }}\"/" pyproject.toml
          echo "Publishing client (new version: $(poetry version -s))"
          until poetry lock -n; do
            poetry cache clear --all -n .
            sleep 1
          done
          poetry install -n
          poetry publish --build --no-interaction
