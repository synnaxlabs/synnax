name: Test - Driver

on:
  push:
    branches:
      - main
      - rc
      - sy-2071-add-linter-in-ci
  pull_request:
    branches:
      - main
      - rc
      - sy-2071-add-linter-in-ci
  workflow_dispatch:
jobs:
  changes:
    name: Changes
    runs-on: ubuntu-latest
    outputs:
      cpp: ${{ steps.filter.outputs.cpp }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Diff Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            cpp:
              - .github/workflows/test.driver.yaml
              - x/cpp/**
              - client/cpp/**
              - freighter/cpp/**
              - driver/**

  test:
    name: Test Driver
    runs-on: ${{ matrix.os }}
    needs: changes
    if: needs.changes.outputs.cpp == 'true'
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Install clang-format
      #   run: |
      #     if [ "$RUNNER_OS" == "Linux" ]; then
      #       sudo apt-get install -y clang-format
      #     elif [ "$RUNNER_OS" == "macOS" ]; then
      #       brew install clang-format
      #     fi

      # - name: Run clang-format
      #   run: |
      #     find ./driver -name '*.cpp' -o -name '*.hpp' -o -name '*.h' -o -name '*.cc' -o -name '*.hh' | xargs clang-format -i --style=file
      #     git diff --color=always | cat
      #     git diff --exit-code || (echo -e "\033[0;31mC++ files in driver need formatting. Run clang-format locally with:\033[0m\nfind ./driver -name '*.cpp' -o -name '*.hpp' -o -name '*.h' -o -name '*.cc' -o -name '*.hh' | xargs clang-format -i --style=file" && exit 1)

      - name: Install MbedTLS On Mac
        run: brew install mbedtls

      - name: Cache Open62541 Build
        id: cache-open62541
        uses: actions/cache@v3
        with:
          path: driver/vendor/open62541/open62541/out
          key: open62541-${{ matrix.os }}

      - name: Update Submodules
        if: hashFiles('driver/vendor/open62541/open62541/out') == ''
        run: git submodule update --init --recursive
      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}-${{ matrix.os }}
          repository-cache: true

      - name: Build Open62541
        if: hashFiles('driver/vendor/open62541/open62541/out') == ''
        shell: bash
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DUA_NAMESPACE_ZERO=FULL \
                -DCMAKE_INSTALL_PREFIX=../out \
                -DUA_ENABLE_ENCRYPTION=MBEDTLS ..
          cmake --build . --config RelWithDebInfo --target install
        working-directory: driver/vendor/open62541/open62541
      
       # Add Hedron's Compile Commands Extractor for clang-tidy integration
      - name: Add compile_commands.json extraction support
        run: |
          echo 'load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
          http_archive(
              name = "hedron_compile_commands",
              url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/ed994039a951b736091776d677f324b3903ef939.tar.gz",
              strip_prefix = "bazel-compile-commands-extractor-ed994039a951b736091776d677f324b3903ef939",
              sha256 = "085bde6c5212c8c1603595341ffe7133108034808d8c819f8978b2b303afc9e7",
          )
          load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")
          hedron_compile_commands_setup()' >> WORKSPACE

      # Generate compile_commands.json
      - name: Generate compile_commands.json
        run: |
          bazel run @hedron_compile_commands//:refresh_all

      - name: Run CPP Linter for Driver
        uses: cpp-linter/cpp-linter-action@v2
        id: linter-driver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: 'file'  # Use .clang-format file
          tidy-checks: '' # Use .clang-tidy file
          version: 16
          files-changed-only: false 
          lines-changed-only: false
          ignore: |
            .*pb\\.h$
            .*pb\\.cc$
            driver/vendor/
            driver/ni/nidaqmx/
            driver/ni/nisyscfg
          database: 'compile_commands.json'
          extra-args: -Wno-unknown-warning-option
          thread-comments: ${{ github.event_name == 'pull_request' }}
          step-summary: true
          directories: |
            driver

      - name: Run CPP Linter for Client
        uses: cpp-linter/cpp-linter-action@v2
        id: linter-client
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: 'file'  # Use .clang-format file
          tidy-checks: '' # Use .clang-tidy file
          version: 16
          files-changed-only: false 
          lines-changed-only: false
          ignore: 'vendor/|external/|third_party/|.*pb\\.h$|.*pb\\.cc$'
          database: 'compile_commands.json'
          extra-args: -Wno-unknown-warning-option
          thread-comments: ${{ github.event_name == 'pull_request' }}
          step-summary: true
          directories: |
            client/cpp

      - name: Fail if checks failed
        if: steps.linter-driver.outputs.checks-failed > 0 || steps.linter-client.outputs.checks-failed > 0
        run: |
          echo "Linting checks failed!"
          echo "Driver checks failed: ${{ steps.linter-driver.outputs.checks-failed }}"
          echo "Client checks failed: ${{ steps.linter-client.outputs.checks-failed }}"
          exit 1

      - name: Run Clang Tidy
        run: |
          chmod +x scripts/tidy-report.sh
          ./scripts/tidy-report.sh bazel-bin/driver > tidy-report.txt
          if [ -s tidy-report.txt ]; then
            echo "Clang-tidy found issues:"
            cat tidy-report.txt
            exit 1
          fi

      - name: Test Driver
        run: bazel test --test_output=all //driver/... --test_tag_filters=-hardware --nocache_test_results