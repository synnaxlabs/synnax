name: Test - Integration

run-name: >
  ${{ github.event.inputs.RUN_NAME || format('Test - Integration {0}', github.ref_name)
  }}

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - rc
  workflow_dispatch:
    inputs:
      RUN_NAME:
        description: "Custom name for this workflow run"
        required: false
        default: ""
        type: string
      SKIP_BUILD:
        description: "Skip build process and use artifacts from another run"
        required: false
        default: false
        type: boolean
      REF_RUN_ID:
        description:
          "Reference run ID for artifacts (when SKIP_BUILD is true, blank for most
          recent)"
        required: false
        default: ""
        type: string
      SEQUENCE:
        description:
          "Test case sequence to run (optional - will auto-discover if empty)"
        required: false
        default: ""
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_SCOPE: deploy-synnax

jobs:
  lint-python:
    name: Lint - Python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Set up Poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: integration/pyproject.toml
          cache: poetry
          cache-dependency-path: integration/poetry.lock

      - name: Install Dependencies
        run: |
          poetry install
        working-directory: integration

      - name: isort
        run: poetry run isort -c .
        working-directory: integration

      - name: Format (Black)
        run: poetry run black --check --diff --color .
        working-directory: integration

      - name: Type Check (mypy)
        run: poetry run mypy .
        working-directory: integration

  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
      SKIP_BUILD:
        ${{ steps.update-outputs.outputs.SKIP_BUILD ||
        steps.set-outputs.outputs.SKIP_BUILD }}
      REF_RUN_ID:
        ${{ steps.update-outputs.outputs.REF_RUN_ID ||
        steps.set-outputs.outputs.REF_RUN_ID }}
      SEQUENCE_ARG: ${{ steps.set-outputs.outputs.SEQUENCE_ARG }}
      USE_CACHE:
        ${{ steps.update-outputs.outputs.USE_CACHE ||
        steps.set-outputs.outputs.USE_CACHE }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Get Version
        id: version
        working-directory: core
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(cat pkg/version/VERSION)-rc" >> $GITHUB_OUTPUT
          fi

      - name: Set outputs
        id: set-outputs
        env:
          SKIP_BUILD: ${{ github.event.inputs.SKIP_BUILD || 'false' }}
          REF_RUN_ID: ${{ github.event.inputs.REF_RUN_ID || '' }}
          SEQUENCE: ${{ github.event.inputs.SEQUENCE || '' }}
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "SKIP_BUILD=${SKIP_BUILD}" >> $GITHUB_OUTPUT

          if [ -z "${SEQUENCE}" ]; then
            echo "SEQUENCE_ARG=" >> $GITHUB_OUTPUT
          else
            echo "SEQUENCE_ARG=--sequence ${SEQUENCE}" >> $GITHUB_OUTPUT
          fi

          if [ "${SKIP_BUILD}" = "false" ]; then
            echo "REF_RUN_ID=${{ github.run_id }}" >> $GITHUB_OUTPUT
            echo "USE_CACHE=true" >> $GITHUB_OUTPUT
          else
            if [ -z "${REF_RUN_ID}" ]; then
              RECENT_RUN_ID=$(gh run list --workflow="test.integration.yaml" --status="success" --limit=50 --json="databaseId,conclusion" --jq='.[].databaseId' | head -1)
              if [ -n "${RECENT_RUN_ID}" ]; then
                echo "REF_RUN_ID=${RECENT_RUN_ID}" >> $GITHUB_OUTPUT
              else
                echo "REF_RUN_ID=0000000000" >> $GITHUB_OUTPUT
              fi
            else
              echo "REF_RUN_ID=${REF_RUN_ID}" >> $GITHUB_OUTPUT
            fi
            echo "USE_CACHE=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for Cached Artifacts
        if:
          ${{ steps.set-outputs.outputs.SKIP_BUILD == 'false' &&
          steps.set-outputs.outputs.USE_CACHE == 'true' }}
        id: check-cache
        env:
          GH_TOKEN: ${{ github.token }}
        run: integration/scripts/check_artifact_cache.sh all

      - name: Update Outputs Based on Cache
        id: update-outputs
        run: |
          if [ "${{ steps.check-cache.outputs.CACHE_HIT }}" = "true" ]; then
            echo "SKIP_BUILD=true" >> $GITHUB_OUTPUT
            echo "REF_RUN_ID=${{ steps.check-cache.outputs.CACHED_RUN_ID }}" >> $GITHUB_OUTPUT
            echo "USE_CACHE=false" >> $GITHUB_OUTPUT
            echo "Using cached artifacts from run ${{ steps.check-cache.outputs.CACHED_RUN_ID }}"
          else
            echo "SKIP_BUILD=${{ steps.set-outputs.outputs.SKIP_BUILD }}" >> $GITHUB_OUTPUT
            echo "REF_RUN_ID=${{ steps.set-outputs.outputs.REF_RUN_ID }}" >> $GITHUB_OUTPUT
            echo "USE_CACHE=${{ steps.set-outputs.outputs.USE_CACHE }}" >> $GITHUB_OUTPUT
            echo "Using artifacts from run ${{ steps.set-outputs.outputs.REF_RUN_ID }}"
          fi

  confirm-host:
    name: Confirm Host (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on:
      - self-hosted
      - ${{ matrix.os }}
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Confirm Host (Unix)
        if: matrix.os == 'ubuntu-latest'
        run: integration/scripts/confirm_host_unix.sh

      - name: Confirm Host (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: integration/scripts/ConfirmHostWindows.cmd

  build:
    name: Build (${{ matrix.os }})
    timeout-minutes: 75
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            confirm-host: confirm-host-ubuntu-latest
            artifact-name: synnax-core-linux
            binary-suffix: linux
            shell: bash
          - os: windows-latest
            confirm-host: confirm-host-windows-latest
            artifact-name: synnax-core-windows
            binary-suffix: windows.exe
            shell: cmd
    runs-on: ${{ matrix.os }}
    needs: [setup, confirm-host]
    steps:
      - name: Skip Build
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'true' }}
        run: echo "Build skipped - using reference artifacts"

      - name: Checkout Repository
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/checkout@v5

      - name: Update Submodules
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: git submodule update --init --recursive

      - name: Install Deps On Ubuntu Latest
        if: matrix.os == 'ubuntu-latest' && needs.setup.outputs.SKIP_BUILD == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsystemd-dev

      - name: Setup Bazel
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ env.CACHE_SCOPE }}-${{ matrix.os }}
          repository-cache: true

      - name: Build Driver
        if: matrix.os != 'windows-latest' && needs.setup.outputs.SKIP_BUILD == 'false'
        run: |
          bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc //driver

      - name: Build Driver (Windows)
        if: matrix.os == 'windows-latest' && needs.setup.outputs.SKIP_BUILD == 'false'
        run:
          bazel --output_user_root=C:/tmp build --enable_platform_specific_config -c opt
          --announce_rc //driver

      - name: Determine OS
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        id: os
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "OS=macos" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "OS=linux" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "OS=windows" >> $GITHUB_OUTPUT
          fi

      - name: Determine Executable Name
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        id: executable
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "EXECUTABLE=.exe" >> $GITHUB_OUTPUT
          else
            echo "EXECUTABLE=" >> $GITHUB_OUTPUT
          fi

      - name: Move Driver to Assets
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        shell: bash
        run: |
          mkdir -p core/pkg/service/hardware/embedded/assets
          mv bazel-bin/driver/driver${{ steps.executable.outputs.EXECUTABLE }} core/pkg/service/hardware/embedded/assets/driver${{ steps.executable.outputs.EXECUTABLE }}

      - name: Set up Go
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Set up pnpm
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm

      - name: Install Node Dependencies
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: pnpm install

      - name: Build Console Web Assets
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: pnpm build:console-vite

      - name: Copy Console Assets to Server
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        shell: bash
        run: cp -r console/dist/* core/pkg/service/console/dist/

      - name: Build
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        working-directory: core
        run: |
          go build -tags console,driver -o synnax-v${{ needs.setup.outputs.VERSION }}-${{ matrix.binary-suffix }}

      - name: Upload Core Binary as Artifact
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path:
            core/synnax-v${{ needs.setup.outputs.VERSION }}-${{ matrix.binary-suffix }}
          retention-days: 7
          if-no-files-found: error

      - name: Debug Build Environment
        if: failure() && matrix.os != 'windows-latest'
        run: integration/scripts/debug_build_environment_unix.sh

      - name: Debug Build Environment (Windows)
        if: failure() && matrix.os == 'windows-latest'
        shell: cmd
        run: integration/scripts/DebugBuildEnvironmentWindows.cmd

  download-artifacts-windows:
    name: Download Artifacts (Windows)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - windows-latest
    needs: [setup, build]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Force Quit Existing Synnax Processes (Windows)
        shell: cmd
        run: integration/scripts/KillSynnaxProcessesWindows.cmd

      - name: Download and Setup Windows Artifacts
        shell: cmd
        env:
          GH_TOKEN: ${{ github.token }}
          REF_RUN_ID: ${{ needs.setup.outputs.REF_RUN_ID }}
        run: integration/scripts/DownloadArtifactsWindows.cmd

  deploy-and-test-windows:
    name: Deploy and Test (windows)
    runs-on:
      - self-hosted
      - windows-latest
    needs: [setup, download-artifacts-windows]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: integration/pyproject.toml

      - name: Install Poetry & Dependencies
        shell: cmd
        run: integration/scripts/InstallPoetryDepsWindows.cmd

      - name: Install Playwright
        shell: cmd
        working-directory: integration
        run: |
          set PATH=%APPDATA%\Python\Scripts;%APPDATA%\pypoetry\venv\Scripts;%PATH%
          poetry run playwright install --with-deps

      - name: Start Core
        timeout-minutes: 1
        shell: powershell
        env:
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        run: integration/scripts/StartCoreWindows.ps1

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        shell: cmd
        working-directory: integration
        env:
          PYTHONIOENCODING: utf-8
        run: |
          set PATH=%APPDATA%\Python\Scripts;%APPDATA%\pypoetry\venv\Scripts;%PATH%
          poetry run test-conductor --name test-conductor-win ${{ needs.setup.outputs.SEQUENCE_ARG }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-windows
          path: integration/test/results/*
          retention-days: 7

      - name: Debug Test Environment
        if: failure()
        shell: cmd
        run: integration/scripts/DebugTestEnvironmentWindows.cmd

  download-artifacts-macos:
    name: Download Artifacts (macos)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - macos-latest
    if: false
    needs: [setup, build]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Force Quit Existing Synnax Processes
        run: integration/scripts/kill_synnax_processes_unix.sh

      - name: Download and Setup macOS Artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          REF_RUN_ID: ${{ needs.setup.outputs.REF_RUN_ID }}
        run: integration/scripts/download_artifacts_unix.sh

  deploy-and-test-macos:
    name: Deploy and Test (macos)
    runs-on:
      - self-hosted
      - macos-latest
    if: false
    needs: [setup, download-artifacts-macos]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: integration/pyproject.toml

      - name: Install Poetry & Dependencies
        run: integration/scripts/install_poetry_deps_unix.sh

      - name: Install Playwright
        run: integration/scripts/install_playwright_unix.sh

      - name: Start Core
        timeout-minutes: 1
        env:
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        run: integration/scripts/start_core_unix.sh

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        working-directory: integration
        run:
          poetry run test-conductor --name test-conductor-unix ${{
          needs.setup.outputs.SEQUENCE_ARG }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-macos
          path: integration/test/results/*
          retention-days: 7

      - name: Debug Test Environment
        if: failure()
        run: integration/scripts/debug_test_environment_unix.sh

  download-artifacts-ubuntu:
    name: Download Artifacts (Ubuntu-Latest)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Force Quit Existing Synnax Processes
        continue-on-error: true
        run: integration/scripts/kill_synnax_processes_unix.sh

      - name: Download and Setup Linux Artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          REF_RUN_ID: ${{ needs.setup.outputs.REF_RUN_ID }}
        run: integration/scripts/download_artifacts_unix.sh

  deploy-and-test-ubuntu:
    name: Deploy and Test (ubuntu)
    runs-on:
      - self-hosted
      - ubuntu-latest
    needs: [setup, download-artifacts-ubuntu]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: integration/pyproject.toml

      - name: Install Poetry & Dependencies
        run: integration/scripts/install_poetry_deps_unix.sh

      - name: Install Playwright
        run: integration/scripts/install_playwright_unix.sh

      - name: Start Core
        timeout-minutes: 1
        env:
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        run: integration/scripts/start_core_unix.sh

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        working-directory: integration
        run:
          poetry run test-conductor --name test-conductor-unix ${{
          needs.setup.outputs.SEQUENCE_ARG }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-linux
          path: integration/test/results/*
          retention-days: 7

      - name: Debug Test Environment
        if: failure()
        run: integration/scripts/debug_test_environment_unix.sh
