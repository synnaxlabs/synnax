name: Deploy - Synnax

on:
  push:
    branches:
      - main
      - rc
  pull_request:
    branches:
      - main
      - rc
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
      changed: ${{ steps.filter.outputs.changed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Version
        id: version
        working-directory: synnax
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(cat pkg/version/VERSION)-rc" >> $GITHUB_OUTPUT
          fi

      - name: Diff Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            changed:
              - .github/workflows/deploy.synnax.yaml
              - alamos/go/**
              - aspen/**
              - cesium/**
              - driver/**
              - freighter/go/**
              - synnax/**
              - x/go/**
              - WORKSPACE

  create-release:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'push' && needs.setup.outputs.changed == 'true'
    steps:
      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const release = releases.find(r => r.tag_name === 'synnax-v${{ needs.setup.outputs.VERSION }}')
            if (release != null) return release.id
            const { data: { id } } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'synnax-v${{ needs.setup.outputs.VERSION }}',
              name: 'Synnax v${{ needs.setup.outputs.VERSION }}',
              draft: false,
              prerelease: false
            });

  build:
    needs: setup
    name: Build (${{ matrix.os }})
    if: needs.setup.outputs.changed == 'true'
    env:
      GH_TOKEN: ${{ github.token }}
    strategy:
      fail-fast: false
      matrix:
        # macOS, Ubuntu for NI Linux RT, Ubuntu Latest, and Windows Latest
        os: [macos-latest, ubuntu-20.04, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        if: matrix.os == 'windows-latest'
        with:
          sdk-version: 22000

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Build MbedTLS On Windows
        if: matrix.os == 'windows-latest' 
        shell: bash
        run: |
          curl -LO https://github.com/Mbed-TLS/mbedtls/releases/download/v3.6.0/mbedtls-3.6.0.tar.bz2
          tar -xjf mbedtls-3.6.0.tar.bz2
          mv mbedtls-3.6.0 mbedtls
          cmake -G "Visual Studio 17 2022" -S mbedtls -B mbedtls-build
          cmake --build mbedtls-build --config Release
          cmake --install mbedtls-build --config Release
          cmake --install mbedtls-build --config Release --prefix mbedtls-install
        working-directory: vendor/mbedtls

      - name: Install MbedTLS On Mac
        if: matrix.os == 'macos-latest'
        run: brew install mbedtls

      - name: Install Deps On Ubuntu
        if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y libmbedtls-dev libsystemd-dev

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}-${{ matrix.os }}
          repository-cache: true

      - name: Build Driver
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
            bazel build --enable_platform_specific_config --define=platform=nilinuxrt //driver
          else
            bazel build --enable_platform_specific_config //driver
          fi

      - name: Build Driver (Windows)
        if: matrix.os == 'windows-latest'
        run: bazel --output_user_root=C:/tmp build --enable_platform_specific_config //driver

      - name: Upload Release Asset for Driver Symbols
        if: matrix.os == 'windows-latest' && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload --clobber synnax-v${{ needs.setup.outputs.VERSION }} bazel-bin/driver/driver.pdb

      - name: Determine OS
        id: os
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "OS=macos" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "OS=linux" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
            echo "OS=nilinuxrt" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "OS=windows" >> $GITHUB_OUTPUT
          fi

      - name: Determine Executable Name
        id: executable
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "EXECUTABLE=.exe" >> $GITHUB_OUTPUT
          else
            echo "EXECUTABLE=" >> $GITHUB_OUTPUT
          fi

      - name: Upload and Move Driver Binary
        if: github.event_name == 'push'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mv bazel-bin/driver/driver${{ steps.executable.outputs.EXECUTABLE }} synnax-driver-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }}
          gh release upload --clobber synnax-v${{ needs.setup.outputs.VERSION }} synnax-driver-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }}

      - name: Move Driver to Assets
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            mv synnax-driver-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }} synnax/pkg/service/hardware/embedded/assets/driver${{ steps.executable.outputs.EXECUTABLE }}
          else
            mv bazel-bin/driver/driver${{ steps.executable.outputs.EXECUTABLE }} synnax/pkg/service/hardware/embedded/assets/driver${{ steps.executable.outputs.EXECUTABLE }}
          fi

      - name: Create Driver Install Script
        if: matrix.os == 'ubuntu-20.04'
        shell: bash
        run: |
          cat > install-driver-nilinuxrt.sh << 'EOF'
          #!/bin/bash
          VERSION="${VERSION:-${{ needs.setup.outputs.VERSION }}}"
          DRIVER_BINARY="synnax-driver-v${VERSION}-nilinuxrt"
          curl -LO "https://github.com/synnaxlabs/synnax/releases/download/synnax-v${VERSION}/${DRIVER_BINARY}"
          chmod +x $DRIVER_BINARY
          ./$DRIVER_BINARY stop
          sudo ./$DRIVER_BINARY install
          ./$DRIVER_BINARY start
          EOF
          gh release upload --clobber synnax-v${{ needs.setup.outputs.VERSION }} install-driver-nilinuxrt.sh

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Download Dependencies
        working-directory: synnax
        run: go mod download

      - name: Build
        working-directory: synnax
        run: |
          go build -tags driver -o synnax-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }}

      - name: Upload Release Asset
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload --clobber synnax-v${{ needs.setup.outputs.VERSION }} ./synnax/synnax-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }}

      - name: Build Windows Installer
        if: matrix.os == 'windows-latest' && needs.setup.outputs.changed == 'true'
        shell: powershell
        run: |
          Copy-Item -Force .\synnax\synnax-v${{ needs.setup.outputs.VERSION }}-windows.exe .\scripts\synnax-server.exe
          & makensis /DVERSION=${{ needs.setup.outputs.VERSION }} .\scripts\windows-installer.nsi
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to build Windows installer"
              exit 1
          }

      - name: Download Latest Earthly
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'push'
        uses: earthly/actions-setup@v1

      - name: Login to Docker Hub
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'push'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'push'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'push'
        run: earthly --push +docker -tag=${{ needs.setup.outputs.VERSION }}
        working-directory: ./synnax

      - name: Push to Github Container Registry
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'push'
        run: |
          docker push ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} ghcr.io/synnaxlabs/synnax:latest
            docker push ghcr.io/synnaxlabs/synnax:latest
          elif [ "${{ github.ref }}" = "refs/heads/rc" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} ghcr.io/synnaxlabs/synnax:rc
            docker push ghcr.io/synnaxlabs/synnax:rc
          fi

      - name: Push to Docker Hub
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'push'
        run: |
          docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }}
          docker push synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} synnaxlabs/synnax:latest
            docker push synnaxlabs/synnax:latest
          elif [ "${{ github.ref }}" = "refs/heads/rc" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} synnaxlabs/synnax:rc
            docker push synnaxlabs/synnax:rc
          fi
