name: Test - Client

on:
  pull_request:
    paths:
      - .bazeliskrc
      - .bazelrc
      - .clang-format
      - .clang-format-ignore
      - .github/workflows/test.client.yaml
      - alamos/go/**
      - alamos/py/**
      - alamos/ts/**
      - aspen/**
      - cesium/**
      - client/cpp/**
      - client/py/**
      - client/ts/**
      - configs/eslint/**
      - configs/ts/**
      - configs/vite/**
      - core/**
      - freighter/cpp/**
      - freighter/go/**
      - freighter/py/**
      - freighter/ts/**
      - go.work
      - go.work.sum
      - MODULE.bazel
      - MODULE.bazel.lock
      - package.json
      - pnpm-lock.yaml
      - pnpm-workspace.yaml
      - scripts/check-clang-format.sh
      - turbo.json
      - x/cpp/**
      - x/go/**
      - x/ts/**
  push:
    branches:
      - main
      - rc
  workflow_dispatch:

jobs:
  changes:
    name: Changes
    runs-on: ubuntu-latest
    outputs:
      cpp: ${{ steps.filter.outputs.cpp }}
      py: ${{ steps.filter.outputs.py }}
      ts: ${{ steps.filter.outputs.ts }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Diff Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            shared: &shared
              - .github/workflows/test.client.yaml
              - alamos/go/**
              - aspen/**
              - cesium/**
              - core/**
              - freighter/go/**
              - go.work
              - go.work.sum
              - x/go/**
            cpp:
              - *shared
              - .bazeliskrc
              - .bazelrc
              - .clang-format
              - .clang-format-ignore
              - client/cpp/**
              - freighter/cpp/**
              - MODULE.bazel
              - MODULE.bazel.lock
              - scripts/check-clang-format.sh
              - x/cpp/**
            py:
              - *shared
              - alamos/py/**
              - client/py/**
              - freighter/py/**
            ts:
              - *shared
              - alamos/ts/**
              - client/ts/**
              - configs/eslint/**
              - configs/ts/**
              - configs/vite/**
              - freighter/ts/**
              - package.json
              - pnpm-lock.yaml
              - pnpm-workspace.yaml
              - turbo.json
              - x/ts/**

  server:
    name: Build - Server
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      GITHUB_SHA: ${{ github.sha }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Earthly
        uses: earthly/actions-setup@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image
        run: earthly --push +docker -tag=${GITHUB_SHA} -driver=false
        working-directory: core

      - name: Push to Github Container Registry
        run: docker push ghcr.io/synnaxlabs/synnax:${GITHUB_SHA}

  cpp:
    name: Test - C++
    needs: [changes, server]
    if: needs.changes.outputs.cpp == 'true'
    runs-on: ubuntu-latest
    services:
      synnax:
        image: ghcr.io/synnaxlabs/synnax:${{ github.sha }}
        env:
          SYNNAX_LISTEN: localhost:9090
          SYNNAX_VERBOSE: true
          SYNNAX_INSECURE: true
          SYNNAX_MEM: true
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 9090:9090
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
      - name: Install Clang Format
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
          sudo apt-get install -y clang-format-20
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-20 100
          sudo update-alternatives --set clang-format /usr/bin/clang-format-20

      - name: Check Formatting
        run: scripts/check-clang-format.sh client/cpp

      - name: Test
        run: bazel test --test_output=all //client/cpp/... --nocache_test_results

  py:
    name: Test - Python
    needs: [changes, server]
    if: needs.changes.outputs.py == 'true'
    runs-on: ubuntu-latest
    services:
      synnax:
        image: ghcr.io/synnaxlabs/synnax:${{ github.sha }}
        env:
          SYNNAX_LISTEN: localhost:9090
          SYNNAX_VERBOSE: true
          SYNNAX_INSECURE: true
          SYNNAX_MEM: true
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 9090:9090
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: client/py/pyproject.toml
          cache: poetry

      - name: Install Dependencies
        run: poetry install
        working-directory: client/py

      - name: isort
        run: poetry run isort -c .
        working-directory: client/py

      - name: Format
        run: poetry run black --check --diff --color .
        working-directory: client/py

      - name: Test
        run: poetry run pytest
        working-directory: client/py

  ts:
    name: Test - TypeScript
    needs: [changes, server]
    if: needs.changes.outputs.ts == 'true'
    runs-on: ubuntu-latest
    services:
      synnax:
        image: ghcr.io/synnaxlabs/synnax:${{ github.sha }}
        env:
          SYNNAX_VERBOSE: true
          SYNNAX_INSECURE: true
          SYNNAX_MEM: true
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 9090:9090
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Build
        run: pnpm build:client

      - name: Lint
        run: pnpm lint:client

      - name: Test
        run: pnpm test:client
