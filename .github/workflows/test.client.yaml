name: Test - Client

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - rc
    paths:
      - .github/workflows/test.client.yaml
      - alamos/go/**
      - alamos/py/**
      - alamos/ts/**
      - aspen/**
      - cesium/**
      - client/cpp/**
      - client/py/**
      - client/ts/**
      - configs/eslint/**
      - configs/ts/**
      - configs/vite/**
      - freighter/cpp/**
      - freighter/go/**
      - freighter/py/**
      - freighter/ts/**
      - synnax/**
      - x/go/**
      - x/ts/**
  workflow_dispatch:

permissions:
  packages: write

jobs:
  changes:
    name: Changes
    runs-on: ubuntu-latest
    outputs:
      cpp: ${{ steps.filter.outputs.cpp }}
      py: ${{ steps.filter.outputs.py }}
      ts: ${{ steps.filter.outputs.ts }}
      any: ${{ steps.filter.outputs.any }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Diff Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            shared: &shared
              - .github/workflows/test.client.yaml
              - alamos/go/**
              - aspen/**
              - cesium/**
              - freighter/go/**
              - synnax/**
              - x/go/**
            cpp: &cpp
              - *shared
              - client/cpp/**
              - freighter/cpp/**
            py: &py
              - *shared
              - alamos/py/**
              - client/py/**
              - freighter/py/**
            ts: &ts
              - *shared
              - alamos/ts/**
              - client/ts/**
              - configs/eslint/**
              - configs/ts/**
              - configs/vite/**
              - freighter/ts/**
              - x/ts/**
            any:
              - *cpp
              - *py
              - *ts

  server:
    name: Server
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.any == 'true'
    env:
      GITHUB_SHA: ${{ github.sha }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Earthly
        uses: earthly/actions-setup@v1

      - name: Build Image
        run: earthly --push +docker -tag=${GITHUB_SHA} -driver=false
        working-directory: synnax

      - name: Push to Github Container Registry
        run: docker push ghcr.io/synnaxlabs/synnax:${GITHUB_SHA}

  cpp:
    name: C++
    needs: [changes, server]
    if: needs.changes.outputs.cpp == 'true'
    runs-on: ubuntu-latest
    services:
      synnax:
        image: ghcr.io/synnaxlabs/synnax:${{ github.sha }}
        env:
          SYNNAX_LISTEN: localhost:9090
          SYNNAX_VERBOSE: true
          SYNNAX_INSECURE: true
          SYNNAX_MEM: true
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 9090:9090
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.13.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Test
        run: bazel test --test_output=all //client/... --nocache_test_results

  py:
    name: Python
    needs: [changes, server]
    if: needs.changes.outputs.py == 'true'
    runs-on: ubuntu-latest
    services:
      synnax:
        image: ghcr.io/synnaxlabs/synnax:${{ github.sha }}
        env:
          SYNNAX_LISTEN: localhost:9090
          SYNNAX_VERBOSE: true
          SYNNAX_INSECURE: true
          SYNNAX_MEM: true
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 9090:9090
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: client/py/pyproject.toml
          cache: poetry

      - name: Install Dependencies
        run: poetry install
        working-directory: client/py

      - name: Format
        run: poetry run black --check --diff --color .
        working-directory: client/py

      - name: Test
        run: poetry run pytest
        working-directory: client/py

  ts:
    name: TypeScript
    needs: [changes, server]
    if: needs.changes.outputs.ts == 'true'
    runs-on: ubuntu-latest
    services:
      synnax:
        image: ghcr.io/synnaxlabs/synnax:${{ github.sha }}
        env:
          SYNNAX_LISTEN: localhost:9090
          SYNNAX_VERBOSE: true
          SYNNAX_INSECURE: true
          SYNNAX_MEM: true
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 9090:9090
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint:client

      - name: Build
        run: pnpm build:client

      - name: Test
        run: pnpm test:client
