name: Test - X

on:
  push:
    branches:
      - main
      - rc
  pull_request:
    branches:
      - main
      - rc
  workflow_dispatch:

jobs:
  changes:
    name: Changes
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.filter.outputs.go }}
      ts: ${{ steps.filter.outputs.ts }}
      cpp: ${{ steps.filter.outputs.cpp }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Diff Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            shared: &shared
              - .github/workflows/test.x.yaml
            cpp:
              - *shared
              - x/cpp/**
            go:
              - *shared
              - alamos/go/**
              - x/go/**
            ts:
              - *shared
              - configs/eslint/**
              - configs/ts/**
              - configs/vite/**
              - x/ts/**

  go:
    name: Go (${{ matrix.os }})
    needs: changes
    if: needs.changes.outputs.go == 'true'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            format: true
        exclude:
          - os: ${{ github.ref != 'refs/heads/main' && 'macos-latest' }}
          - os: ${{ github.ref != 'refs/heads/main' && 'windows-latest' }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Check Formatting
        if: matrix.format
        run: bash scripts/gofmt-check.sh x/go

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo

      - name: Test
        run: ginkgo ./...
        working-directory: x/go

  ts:
    name: TypeScript (${{ matrix.os }})
    needs: changes
    if: needs.changes.outputs.ts == 'true'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            lint: true
        exclude:
          - os: ${{ github.ref != 'refs/heads/main' && 'macos-latest' }}
          - os: ${{ github.ref != 'refs/heads/main' && 'windows-latest' }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Build
        run: pnpm build:x

      - name: Lint
        if: matrix.lint
        run: pnpm lint:x

      - name: Test
        run: pnpm test:x

  cpp:
    name: C++ (${{ matrix.os }})
    needs: changes
    if: needs.changes.outputs.cpp == 'true'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        exclude:
          - os: ${{ github.ref != 'refs/heads/main' && 'macos-latest' }}
          - os: ${{ github.ref != 'refs/heads/main' && 'windows-latest' }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Test
        run: bazel test --test_output=all //x/cpp/... --nocache_test_results
