name: Build - Binaries

run-name:
  ${{ github.event.inputs.RUN_NAME || format('Build Binaries - {0}', github.ref_name) }}

on:
  workflow_dispatch:
    inputs:
      windows:
        description: "OS: Windows"
        type: boolean
        default: false
      macos:
        description: "OS: macOS"
        type: boolean
        default: false
      ubuntu:
        description: "OS: Ubuntu"
        type: boolean
        default: false
      ubuntu_22_04:
        description: "OS: NI Linux RT (Ubuntu 22.04)"
        type: boolean
        default: false
      driver:
        description: "Build: Driver"
        type: boolean
        default: false
      console:
        description: "Build: Console"
        type: boolean
        default: false
      core:
        description: "Build: Core"
        type: boolean
        default: false
      RUN_NAME:
        description: "Custom name for run"
        required: false
        default: ""
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_SCOPE: deploy-synnax

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Get Version
        id: version
        working-directory: core
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(cat pkg/version/VERSION)-rc" >> $GITHUB_OUTPUT
          fi

      - name: Generate OS Matrix
        id: set-matrix
        run: |
          MATRIX=$(integration/scripts/generate_os_matrix.sh "${{ inputs.windows }}" "${{ inputs.macos }}" "${{ inputs.ubuntu }}" "${{ inputs.ubuntu_22_04 }}")
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

      - name: Verify Build Configuration
        run: |
          integration/scripts/verify_build_config.sh \
            "${{ steps.version.outputs.VERSION }}" \
            "${{ inputs.windows }}" \
            "${{ inputs.macos }}" \
            "${{ inputs.ubuntu }}" \
            "${{ inputs.ubuntu_22_04 }}" \
            "${{ inputs.driver }}" \
            "${{ inputs.console }}" \
            "${{ inputs.core }}"

  build:
    name: Build (${{ matrix.os }})
    needs: setup
    if: needs.setup.outputs.matrix != '[]'
    timeout-minutes: 75
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.setup.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Install Deps On Ubuntu
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsystemd-dev autoconf automake libtool

      - name: Determine Executable Name
        id: executable
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "EXECUTABLE=.exe" >> $GITHUB_OUTPUT
          else
            echo "EXECUTABLE=" >> $GITHUB_OUTPUT
          fi

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ env.CACHE_SCOPE }}-${{ matrix.os }}
          repository-cache: true

      - name: Build Driver
        if: inputs.driver && matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            TMPDIR=/tmp bazel build --enable_platform_specific_config -c opt --define=platform=nilinuxrt --announce_rc --verbose_failures //driver
          else
            bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc --verbose_failures //driver
          fi

      - name: Build Driver (Windows)
        if: inputs.driver && matrix.os == 'windows-latest'
        run:
          bazel --output_user_root=C:/tmp build --enable_platform_specific_config -c opt
          --announce_rc //driver

      - name: Upload Driver Binary as Artifact
        if: inputs.driver
        uses: actions/upload-artifact@v4
        with:
          name: synnax-driver-${{ matrix.binary-suffix }}
          path: bazel-bin/driver/driver${{ steps.executable.outputs.EXECUTABLE }}
          retention-days: 7
          if-no-files-found: error

      - name: Move Driver to Assets
        if: inputs.driver && inputs.core
        shell: bash
        run: |
          mv bazel-bin/driver/driver${{ steps.executable.outputs.EXECUTABLE }} core/pkg/service/hardware/embedded/assets/driver${{ steps.executable.outputs.EXECUTABLE }}

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Set up pnpm
        if: inputs.console
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        if: inputs.console
        uses: actions/setup-node@v5
        with:
          node-version-file: package.json
          cache: pnpm

      - name: Install Node Dependencies
        if: inputs.console
        run: pnpm install

      - name: Build Console Web Assets
        if: inputs.console
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: pnpm build:console-vite

      - name: Upload Console Assets as Artifact
        if: inputs.console
        uses: actions/upload-artifact@v4
        with:
          name: synnax-console-${{ matrix.binary-suffix }}
          path: console/dist/
          retention-days: 7
          if-no-files-found: error

      - name: Move Console to Assets
        if: inputs.console && inputs.core
        shell: bash
        run: cp -r console/dist/* core/pkg/service/console/dist/

      - name: Build Core
        if: inputs.core
        working-directory: core
        shell: bash
        run: |
          TAGS=""
          ${{ inputs.console == true }} && TAGS="console"
          ${{ inputs.driver == true }} && TAGS="${TAGS:+$TAGS,}driver"
          [ -n "$TAGS" ] && TAGS="-tags $TAGS"
          go build $TAGS -o synnax-v${{ needs.setup.outputs.VERSION }}-${{ matrix.binary-suffix }}

      - name: Upload Core Binary as Artifact
        if: inputs.core
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path:
            core/synnax-v${{ needs.setup.outputs.VERSION }}-${{ matrix.binary-suffix }}
          retention-days: 7
          if-no-files-found: error

      - name: Debug Build Environment
        if: failure() && matrix.os != 'windows-latest'
        run: integration/scripts/debug_build_environment_unix.sh

      - name: Debug Build Environment (Windows)
        if: failure() && matrix.os == 'windows-latest'
        shell: cmd
        run: integration/scripts/DebugBuildEnvironmentWindows.cmd
