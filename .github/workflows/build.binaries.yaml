name: Build - Binaries

on:
  workflow_dispatch:
  push:
    branches:
      - sy-3013-validate-ni-module-minmax-sample-rates

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_SCOPE: deploy-synnax

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Get Version
        id: version
        working-directory: core
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(cat pkg/version/VERSION)-rc" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build (${{ matrix.os }})
    needs: setup
    timeout-minutes: 75
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact-name: synnax-core-linux
            binary-suffix: linux
          - os: windows-latest
            artifact-name: synnax-core-windows
            binary-suffix: windows.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Install Deps On Ubuntu Latest
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsystemd-dev

      - name: Determine Executable Name
        id: executable
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "EXECUTABLE=.exe" >> $GITHUB_OUTPUT
          else
            echo "EXECUTABLE=" >> $GITHUB_OUTPUT
          fi

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ env.CACHE_SCOPE }}-${{ matrix.os }}
          repository-cache: true

      - name: Build Driver
        if: matrix.os != 'windows-latest'
        run: |
          bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc //driver

      - name: Build Driver (Windows)
        if: matrix.os == 'windows-latest'
        run:
          bazel --output_user_root=C:/tmp build --enable_platform_specific_config -c opt
          --announce_rc //driver

      - name: Upload Driver Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: synnax-driver-${{ matrix.binary-suffix }}
          path: bazel-bin/driver/driver${{ steps.executable.outputs.EXECUTABLE }}
          retention-days: 7
          if-no-files-found: error

      - name: Move Driver to Assets
        shell: bash
        run: |
          mv bazel-bin/driver/driver${{ steps.executable.outputs.EXECUTABLE }} core/pkg/service/hardware/embedded/assets/driver${{ steps.executable.outputs.EXECUTABLE }}

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: package.json
          cache: pnpm

      - name: Install Node Dependencies
        run: pnpm install

      - name: Build Console Web Assets
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: pnpm build:console-vite

      - name: Copy Console Assets to Server
        shell: bash
        run: cp -r console/dist/* core/pkg/service/console/dist/

      - name: Build
        working-directory: core
        run: |
          go build -tags console,driver -o synnax-v${{ needs.setup.outputs.VERSION }}-${{ matrix.binary-suffix }}

      - name: Upload Core Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path:
            core/synnax-v${{ needs.setup.outputs.VERSION }}-${{ matrix.binary-suffix }}
          retention-days: 7
          if-no-files-found: error

      - name: Debug Build Environment
        if: failure() && matrix.os != 'windows-latest'
        run: integration/scripts/debug_build_environment_unix.sh

      - name: Debug Build Environment (Windows)
        if: failure() && matrix.os == 'windows-latest'
        shell: cmd
        run: integration/scripts/DebugBuildEnvironmentWindows.cmd
