name: Deploy - Core

on:
  push:
    branches:
      - main
      - rc
    paths:
      - .bazeliskrc
      - .bazelrc
      - .github/workflows/deploy.core.yaml
      - alamos/go/**
      - alamos/ts/**
      - aspen/**
      - cesium/**
      - client/cpp/**
      - client/ts/**
      - configs/ts/**
      - configs/vite/**
      - console/**
      - core/**
      - drift/**
      - driver/**
      - Earthfile
      - freighter/cpp/**
      - freighter/go/**
      - freighter/ts/**
      - go.work
      - go.work.sum
      - MODULE.bazel
      - MODULE.bazel.lock
      - package.json
      - pluto/**
      - pnpm-lock.yaml
      - pnpm-workspace.yaml
      - relic.conf
      - scripts/EnVar.dll
      - turbo.json
      - vendor/mbedtls/**
      - vendor/open62541/**
      - x/cpp/**
      - x/go/**
      - x/ts/**
  pull_request:
    paths:
      - .bazeliskrc
      - .bazelrc
      - .github/workflows/deploy.core.yaml
      - alamos/go/**
      - alamos/ts/**
      - aspen/**
      - cesium/**
      - client/cpp/**
      - client/ts/**
      - configs/ts/**
      - configs/vite/**
      - console/**
      - core/**
      - drift/**
      - driver/**
      - freighter/cpp/**
      - freighter/go/**
      - freighter/ts/**
      - go.work
      - go.work.sum
      - MODULE.bazel
      - MODULE.bazel.lock
      - package.json
      - pluto/**
      - pnpm-lock.yaml
      - pnpm-workspace.yaml
      - turbo.json
      - vendor/mbedtls/**
      - vendor/open62541/**
      - x/cpp/**
      - x/go/**
      - x/ts/**
  workflow_dispatch:

env:
  CACHE_SCOPE: deploy-synnax

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Get Version
        id: version
        working-directory: core
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(cat pkg/version/VERSION)-rc" >> $GITHUB_OUTPUT
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name != 'pull_request'
    permissions:
      contents: write
    steps:
      - name: Create Release
        uses: actions/github-script@v8
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const release = releases.find(r => r.tag_name === 'synnax-v${{ needs.setup.outputs.VERSION }}')
            if (release != null) return release.id
            const { data: { id } } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'synnax-v${{ needs.setup.outputs.VERSION }}',
              name: 'Synnax v${{ needs.setup.outputs.VERSION }}',
              draft: false,
              prerelease: false
            });

  build:
    needs: [setup, create-release]
    name: Build (${{ matrix.os }})
    permissions:
      contents: write
      packages: write
    env:
      GH_TOKEN: ${{ github.token }}
      NODE_OPTIONS: "--max_old_space_size=4096"
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-22.04, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Install Deps On Ubuntu Latest
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsystemd-dev

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ env.CACHE_SCOPE }}-${{ matrix.os }}
          repository-cache: true

      - name: Build Driver
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            bazel build --enable_platform_specific_config -c opt --define=platform=nilinuxrt --announce_rc //driver
          else
            bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc //driver
          fi

      - name: Build Driver (Windows)
        if: matrix.os == 'windows-latest'
        run:
          bazel --output_user_root=C:/tmp build --enable_platform_specific_config -c opt
          --announce_rc //driver

      - name: Download relic for Windows signing
        if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'
        run: |
          curl -L -o relic.exe https://github.com/sassoftware/relic/releases/latest/download/relic-windows-amd64.exe

      - name: Add relic to PATH
        if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path relic-bin
          Move-Item -Force relic.exe relic-bin\
          echo "${{ github.workspace }}\relic-bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Determine OS
        id: os
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "OS=macos" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "OS=linux" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            echo "OS=nilinuxrt" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "OS=windows" >> $GITHUB_OUTPUT
          fi

      - name: Determine Executable Name
        id: executable
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "EXECUTABLE=.exe" >> $GITHUB_OUTPUT
          else
            echo "EXECUTABLE=" >> $GITHUB_OUTPUT
          fi

      - name: Import Apple Developer Certificate
        if: matrix.os == 'macos-latest' && github.event_name != 'pull_request'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          # Prevent the keychain from getting locked during the build process
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Sign macOS Driver Binary
        if: matrix.os == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          # Create entitlements file to disable library validation for LabJack support
          cat > driver-entitlements.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
          </dict>
          </plist>
          EOF

          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          codesign --force --options runtime --timestamp --entitlements driver-entitlements.plist --sign "$CERT_ID" bazel-bin/driver/driver
          codesign --verify --verbose bazel-bin/driver/driver

      - name: Sign Windows Driver Binary
        if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'
        shell: pwsh
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          # Path to Bazel output
          $bin = "bazel-bin\driver\driver.exe"

          # Give any AV/indexers a moment to release handles
          Start-Sleep -Seconds 2

          # Clear Windows file attributes first; Bazel marks outputs read-only
          attrib -R -S -H -A $bin

          # (Optional) ensure ownership + broad write perms; attrib is the key piece
          takeown /F $bin | Out-Null
          icacls $bin /grant "*S-1-1-0:(F)" /inheritance:e | Out-Null  # Everyone:F via well-known SID

          # Retry a few times in case something still has a transient lock
          $max = 5
          for ($i = 1; $i -le $max; $i++) {
            try {
              relic sign --file $bin --key azure --config relic.conf
              break
            } catch {
              if ($i -eq $max) { throw }
              Start-Sleep -Seconds 3
            }
          }

      - name: Upload and Move Driver Binary
        if: github.event_name != 'pull_request'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mv bazel-bin/driver/driver${{ steps.executable.outputs.EXECUTABLE }} synnax-driver-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }}
          gh release upload --clobber synnax-v${{ needs.setup.outputs.VERSION }} synnax-driver-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }}

      - name: Move Driver to Assets
        shell: bash
        run: |
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            mv synnax-driver-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }} core/pkg/service/hardware/embedded/assets/driver${{ steps.executable.outputs.EXECUTABLE }}
          else
            mv bazel-bin/driver/driver${{ steps.executable.outputs.EXECUTABLE }} core/pkg/service/hardware/embedded/assets/driver${{ steps.executable.outputs.EXECUTABLE }}
          fi

      - name: Create Driver Install Script for NI Linux RT
        if: matrix.os == 'ubuntu-22.04' && github.event_name != 'pull_request'
        shell: bash
        run: |
          cat > install-driver-nilinuxrt.sh << 'EOF'
          #!/bin/bash
          VERSION="${VERSION:-${{ needs.setup.outputs.VERSION }}}"
          DRIVER_BINARY="synnax-driver-v${VERSION}-nilinuxrt"
          curl -LO "https://github.com/synnaxlabs/synnax/releases/download/synnax-v${VERSION}/${DRIVER_BINARY}"
          chmod +x $DRIVER_BINARY
          ./$DRIVER_BINARY stop
          sudo ./$DRIVER_BINARY install
          ./$DRIVER_BINARY start
          EOF
          gh release upload --clobber synnax-v${{ needs.setup.outputs.VERSION }} install-driver-nilinuxrt.sh

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm

      - name: Install Node Dependencies
        run: pnpm install

      - name: Build Console Web Assets
        run: pnpm build:console-vite

      - name: Copy Console Assets to Server
        shell: bash
        run: cp -r console/dist/* core/pkg/service/console/dist/

      - name: Build
        working-directory: core
        run: |
          go build -tags console,driver -o synnax-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }}

      - name: Sign macOS Server Binary
        if: matrix.os == 'macos-latest' && github.event_name != 'pull_request'
        working-directory: core
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          codesign --force --options runtime --timestamp --sign "$CERT_ID" ./synnax-v${{ needs.setup.outputs.VERSION }}-macos
          codesign --verify --verbose ./synnax-v${{ needs.setup.outputs.VERSION }}-macos

      - name: Sign Windows Server Binary
        if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          relic sign --file core/synnax-v${{ needs.setup.outputs.VERSION }}-windows.exe --key azure --config relic.conf

      - name: Upload Release Asset
        if: github.event_name != 'pull_request'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release upload --clobber synnax-v${{ needs.setup.outputs.VERSION }} core/synnax-v${{ needs.setup.outputs.VERSION }}-${{ steps.os.outputs.OS }}${{ steps.executable.outputs.EXECUTABLE }}

      - name: Build Windows Installer
        if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'
        shell: powershell
        run: |
          # Ensure EnVar.dll is present in the correct plugin path
          $pluginPath = "${env:ProgramFiles(x86)}\NSIS\Plugins\x86-unicode"
          Copy-Item -Force .\scripts\EnVar.dll "$pluginPath\EnVar.dll"

          # Prepare the binary for packaging
          Copy-Item -Force .\core\synnax-v${{ needs.setup.outputs.VERSION }}-windows.exe .\scripts\synnax-server.exe

          # Build the installer
          & makensis /DVERSION=${{ needs.setup.outputs.VERSION }} .\scripts\windows_installer.nsi
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to build Windows installer"
              exit 1
          }

      - name: Sign Windows Installer
        if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          relic sign --file .\scripts\synnax-setup-v${{ needs.setup.outputs.VERSION }}.exe --key azure --config relic.conf

      - name: Upload Windows Installer
        if: matrix.os == 'windows-latest' && github.event_name != 'pull_request'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release upload --clobber synnax-v${{ needs.setup.outputs.VERSION }} .\scripts\synnax-setup-v${{ needs.setup.outputs.VERSION }}.exe

      - name: Download Latest Earthly
        if: matrix.os == 'ubuntu-latest' && github.event_name != 'pull_request'
        uses: earthly/actions-setup@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: matrix.os == 'ubuntu-latest' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        if: matrix.os == 'ubuntu-latest' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image
        if: matrix.os == 'ubuntu-latest' && github.event_name != 'pull_request'
        run: earthly --push +docker -tag=${{ needs.setup.outputs.VERSION }}
        working-directory: core

      - name: Push to Github Container Registry
        if: matrix.os == 'ubuntu-latest' && github.event_name != 'pull_request'
        run: |
          docker push ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} ghcr.io/synnaxlabs/synnax:latest
            docker push ghcr.io/synnaxlabs/synnax:latest
          elif [ "${{ github.ref }}" = "refs/heads/rc" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} ghcr.io/synnaxlabs/synnax:rc
            docker push ghcr.io/synnaxlabs/synnax:rc
          fi

      - name: Push to Docker Hub
        if: matrix.os == 'ubuntu-latest' && github.event_name != 'pull_request'
        run: |
          docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }}
          docker push synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} synnaxlabs/synnax:latest
            docker push synnaxlabs/synnax:latest
          elif [ "${{ github.ref }}" = "refs/heads/rc" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ needs.setup.outputs.VERSION }} synnaxlabs/synnax:rc
            docker push synnaxlabs/synnax:rc
          fi
