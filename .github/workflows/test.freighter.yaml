name: Test - Freighter

on:
  push:
    branches:
      - main
      - rc
  pull_request:
    branches:
      - main
      - rc
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  changes:
    name: Changes
    runs-on: ubuntu-latest
    outputs:
      cpp: ${{ steps.filter.outputs.cpp }}
      go: ${{ steps.filter.outputs.go }}
      integration: ${{ steps.filter.outputs.integration }}
      py: ${{ steps.filter.outputs.py }}
      ts: ${{ steps.filter.outputs.ts }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Diff Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            shared: &shared
              - .github/workflows/test.freighter.yaml
            cpp:
              - *shared
              - freighter/cpp/**
            go: &go
              - *shared
              - alamos/go/**
              - freighter/go/**
              - x/go/**
            integration: &integration
              - *go
              - freighter/integration/**
              - x/go/**
            py:
              - *shared
              - *integration
              - alamos/py/**
              - freighter/py/**
            ts:
              - *shared
              - *integration
              - alamos/ts/**
              - configs/eslint/**
              - configs/ts/**
              - configs/vite/**
              - freighter/ts/**
              - x/ts/**

  cpp:
    name: C++ (${{ matrix.os }})
    needs: changes
    if: needs.changes.outputs.cpp == 'true'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        exclude:
          - os: ${{ github.ref != 'refs/heads/main' && 'macos-latest' }}
          - os: ${{ github.ref != 'refs/heads/main' && 'windows-latest' }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Test
        run: bazel test --test_output=all //freighter/cpp/... --nocache_test_results
  go:
    name: Go (${{ matrix.os }})
    needs: changes
    if: needs.changes.outputs.go == 'true'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            format: true
        exclude:
          - os: ${{ github.ref != 'refs/heads/main' && 'macos-latest' }}
          - os: ${{ github.ref != 'refs/heads/main' && 'windows-latest' }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Check Formatting
        if: matrix.format
        run: scripts/gofmt-check.sh freighter/go

      - name: Test
        run: go test -v -shuffle=on ./...
        working-directory: freighter/go

  integration:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.integration == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Earthly
        uses: earthly/actions-setup@v1

      - name: Build Image
        run: earthly --push +docker
        working-directory: freighter/integration

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Check Formatting
        run: scripts/gofmt-check.sh freighter/integration

  py:
    name: Python
    needs: [changes, integration]
    if: needs.changes.outputs.py == 'true'
    runs-on: ubuntu-latest
    services:
      integration:
        image: ghcr.io/synnaxlabs/freighter-go-integration:latest
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 8080:8080
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: freighter/py/pyproject.toml
          cache: poetry

      - name: Install Dependencies
        run: poetry install
        working-directory: freighter/py

      - name: Format
        run: poetry run black --check --diff --color .
        working-directory: freighter/py

      - name: Test
        run: poetry run pytest
        working-directory: freighter/py

  ts:
    name: TypeScript
    needs: [changes, integration]
    if: needs.changes.outputs.ts == 'true'
    runs-on: ubuntu-latest
    services:
      integration:
        image: ghcr.io/synnaxlabs/freighter-go-integration:latest
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 8080:8080
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Build
        run: pnpm build:freighter

      - name: Lint
        run: pnpm lint:freighter

      - name: Test
        run: pnpm test:freighter
